// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_DI_DI_PIMPL_HXX
#define E__VS14PRJBKP_ENGINE_DI_DI_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define E__VS14PRJBKP_ENGINE_DI_DI_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "di-pskel.hxx"

#include <xsde/cxx/stack.hxx>

class param_class_type_pimpl: public param_class_type_pskel
{
  public:
  param_class_type_pimpl ();

  virtual void
  pre ();

  virtual void
  _characters (const ::xsde::cxx::ro_string&);

  virtual void
  _post ();

  virtual ::param_class_type
  post_param_class_type ();

  public:
  struct param_class_type_pimpl_state
  {
    ::std::string str_;
  };

  param_class_type_pimpl_state param_class_type_pimpl_state_;
};

class insert_pimpl: public insert_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  value (const ::std::string&);

  virtual ::insert
  post_insert ();

  public:
  struct insert_pimpl_state
  {
    ::insert insert_;
  };

  insert_pimpl_state insert_pimpl_state_;
};

class attribute_type_pimpl: public attribute_type_pskel
{
  public:
  attribute_type_pimpl (bool = false);

  ~attribute_type_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  value (const ::std::string&);

  // Elements.
  //
  virtual void
  insert (const ::insert&);

  virtual ::attribute_type*
  post_attribute_type ();

  public:
  void
  pre_impl (::attribute_type*);

  public:
  struct attribute_type_pimpl_state
  {
    ::attribute_type* attribute_type_;
  };

  attribute_type_pimpl_state attribute_type_pimpl_state_;
  bool attribute_type_pimpl_base_;
};

class param_type_pimpl: public param_type_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  type (const ::param_class_type&);

  virtual void
  value (const ::std::string&);

  virtual ::param_type
  post_param_type ();

  public:
  struct param_type_pimpl_state
  {
    ::param_type param_type_;
  };

  param_type_pimpl_state param_type_pimpl_state_;
};

class inject_one_type_pimpl: public inject_one_type_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  injection (const ::std::string&);

  virtual void
  slot (const ::std::string&);

  virtual ::inject_one_type
  post_inject_one_type ();

  public:
  struct inject_one_type_pimpl_state
  {
    ::inject_one_type inject_one_type_;
  };

  inject_one_type_pimpl_state inject_one_type_pimpl_state_;
};

class inject_all_type_pimpl: public inject_all_type_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  receiver (const ::std::string&);

  virtual void
  slot (const ::std::string&);

  virtual ::inject_all_type
  post_inject_all_type ();

  public:
  struct inject_all_type_pimpl_state
  {
    ::inject_all_type inject_all_type_;
  };

  inject_all_type_pimpl_state inject_all_type_pimpl_state_;
};

class component_pimpl: public component_pskel
{
  public:
  component_pimpl (bool = false);

  ~component_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  class_ (const ::std::string&);

  // Elements.
  //
  virtual void
  attribute (::attribute_type*);

  virtual ::component*
  post_component ();

  public:
  void
  pre_impl (::component*);

  public:
  struct component_pimpl_state
  {
    ::component* component_;
  };

  component_pimpl_state component_pimpl_state_;
  bool component_pimpl_base_;
};

class inject_pimpl: public inject_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  receiver (const ::std::string&);

  virtual void
  injection (const ::std::string&);

  virtual void
  slot (const ::std::string&);

  virtual ::inject
  post_inject ();

  public:
  struct inject_pimpl_state
  {
    ::inject inject_;
  };

  inject_pimpl_state inject_pimpl_state_;
};

class inject_one_pimpl: public inject_one_pskel
{
  public:
  inject_one_pimpl (bool = false);

  ~inject_one_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  receiver (const ::std::string&);

  // Elements.
  //
  virtual void
  inject (const ::inject_one_type&);

  virtual ::inject_one*
  post_inject_one ();

  public:
  void
  pre_impl (::inject_one*);

  public:
  struct inject_one_pimpl_state
  {
    ::inject_one* inject_one_;
  };

  inject_one_pimpl_state inject_one_pimpl_state_;
  bool inject_one_pimpl_base_;
};

class inject_all_pimpl: public inject_all_pskel
{
  public:
  inject_all_pimpl (bool = false);

  ~inject_all_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  injection (const ::std::string&);

  // Elements.
  //
  virtual void
  inject (const ::inject_all_type&);

  virtual ::inject_all*
  post_inject_all ();

  public:
  void
  pre_impl (::inject_all*);

  public:
  struct inject_all_pimpl_state
  {
    ::inject_all* inject_all_;
  };

  inject_all_pimpl_state inject_all_pimpl_state_;
  bool inject_all_pimpl_base_;
};

class inject_slot_pimpl: public inject_slot_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  slot (const ::std::string&);

  virtual void
  injection (const ::std::string&);

  virtual ::inject_slot
  post_inject_slot ();

  public:
  struct inject_slot_pimpl_state
  {
    ::inject_slot inject_slot_;
  };

  inject_slot_pimpl_state inject_slot_pimpl_state_;
};

class DI_pimpl: public DI_pskel
{
  public:
  DI_pimpl (bool = false);

  ~DI_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  plugins (::plugins*);

  virtual void
  components (::components*);

  virtual void
  wiring (::wiring*);

  virtual ::DI*
  post_DI ();

  public:
  void
  pre_impl (::DI*);

  public:
  struct DI_pimpl_state
  {
    ::DI* DI_;
  };

  DI_pimpl_state DI_pimpl_state_;
  bool DI_pimpl_base_;
};

class shared_pimpl: public shared_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  lib (const ::std::string&);

  virtual ::shared
  post_shared ();

  public:
  struct shared_pimpl_state
  {
    ::shared shared_;
  };

  shared_pimpl_state shared_pimpl_state_;
};

class plugins_pimpl: public plugins_pskel
{
  public:
  plugins_pimpl (bool = false);

  ~plugins_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  shared (const ::shared&);

  virtual ::plugins*
  post_plugins ();

  public:
  void
  pre_impl (::plugins*);

  public:
  struct plugins_pimpl_state
  {
    ::plugins* plugins_;
  };

  plugins_pimpl_state plugins_pimpl_state_;
  bool plugins_pimpl_base_;
};

class components_pimpl: public components_pskel
{
  public:
  components_pimpl (bool = false);

  ~components_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  component (::component*);

  virtual ::components*
  post_components ();

  public:
  void
  pre_impl (::components*);

  public:
  struct components_pimpl_state
  {
    ::components* components_;
  };

  components_pimpl_state components_pimpl_state_;
  bool components_pimpl_base_;
};

class wiring_pimpl: public wiring_pskel
{
  public:
  wiring_pimpl (bool = false);

  ~wiring_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  inject (const ::inject&);

  virtual void
  inject_all (::inject_all*);

  virtual void
  inject_one (::inject_one*);

  virtual void
  inject_slot (const ::inject_slot&);

  virtual ::wiring*
  post_wiring ();

  public:
  void
  pre_impl (::wiring*);

  public:
  struct wiring_pimpl_state
  {
    ::wiring* wiring_;
  };

  wiring_pimpl_state wiring_pimpl_state_;
  bool wiring_pimpl_base_;
};

#ifdef E__VS14PRJBKP_ENGINE_DI_DI_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

// Parser aggregate for the DI element.
//
class DI_paggr
{
  public:
  DI_paggr ();

  void
  pre ()
  {
    this->DI_p_.pre ();
  }

  ::DI*
  post ()
  {
    return this->DI_p_.post_DI ();
  }

  ::DI_pimpl&
  root_parser ()
  {
    return this->DI_p_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->DI_p_._reset ();
  }

  public:
  ::component_pimpl component_p_;
  ::inject_pimpl inject_p_;
  ::inject_one_type_pimpl inject_one_type_p_;
  ::inject_one_pimpl inject_one_p_;
  ::inject_all_type_pimpl inject_all_type_p_;
  ::inject_all_pimpl inject_all_p_;
  ::inject_slot_pimpl inject_slot_p_;
  ::DI_pimpl DI_p_;
  ::plugins_pimpl plugins_p_;
  ::shared_pimpl shared_p_;
  ::components_pimpl components_p_;
  ::xml_schema::name_pimpl name_p_;
  ::xml_schema::token_pimpl token_p_;
  ::xml_schema::string_pimpl string_p_;
  ::wiring_pimpl wiring_p_;
  ::attribute_type_pimpl attribute_type_p_;
  ::insert_pimpl insert_p_;
};

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_DI_DI_PIMPL_HXX
