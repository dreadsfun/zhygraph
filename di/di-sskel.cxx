// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "di-sskel.hxx"

// param_class_type_sskel
//

param_class_type_sskel::
param_class_type_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  param_class_type_impl_ (0)
{
  this->_enumeration_facet (_xsde_param_class_type_sskel_enums_, 8UL);
}

param_class_type_sskel::
param_class_type_sskel (param_class_type_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  param_class_type_impl_ (impl)
{
  this->_enumeration_facet (_xsde_param_class_type_sskel_enums_, 8UL);
}

// insert_sskel
//

void insert_sskel::
value_serializer (::xml_schema::string_sskel& value)
{
  this->value_serializer_ = &value;
}

void insert_sskel::
serializers (::xml_schema::string_sskel& value)
{
  this->value_serializer_ = &value;
}

insert_sskel::
insert_sskel ()
: insert_impl_ (0),
  value_serializer_ (0)
{
}

insert_sskel::
insert_sskel (insert_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  insert_impl_ (impl),
  value_serializer_ (0)
{
}

// attribute_type_sskel
//

void attribute_type_sskel::
name_serializer (::xml_schema::token_sskel& name)
{
  this->name_serializer_ = &name;
}

void attribute_type_sskel::
value_serializer (::xml_schema::string_sskel& value)
{
  this->value_serializer_ = &value;
}

void attribute_type_sskel::
insert_serializer (::insert_sskel& s)
{
  this->insert_serializer_ = &s;
}

void attribute_type_sskel::
serializers (::xml_schema::token_sskel& name,
             ::xml_schema::string_sskel& value,
             ::insert_sskel& insert)
{
  this->name_serializer_ = &name;
  this->value_serializer_ = &value;
  this->insert_serializer_ = &insert;
}

attribute_type_sskel::
attribute_type_sskel ()
: attribute_type_impl_ (0),
  name_serializer_ (0),
  value_serializer_ (0),
  insert_serializer_ (0)
{
}

attribute_type_sskel::
attribute_type_sskel (attribute_type_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  attribute_type_impl_ (impl),
  name_serializer_ (0),
  value_serializer_ (0),
  insert_serializer_ (0)
{
}

// param_type_sskel
//

void param_type_sskel::
type_serializer (::param_class_type_sskel& type)
{
  this->type_serializer_ = &type;
}

void param_type_sskel::
value_serializer (::xml_schema::string_sskel& value)
{
  this->value_serializer_ = &value;
}

void param_type_sskel::
serializers (::param_class_type_sskel& type,
             ::xml_schema::string_sskel& value)
{
  this->type_serializer_ = &type;
  this->value_serializer_ = &value;
}

param_type_sskel::
param_type_sskel ()
: param_type_impl_ (0),
  type_serializer_ (0),
  value_serializer_ (0)
{
}

param_type_sskel::
param_type_sskel (param_type_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  param_type_impl_ (impl),
  type_serializer_ (0),
  value_serializer_ (0)
{
}

// inject_one_type_sskel
//

void inject_one_type_sskel::
injection_serializer (::xml_schema::token_sskel& injection)
{
  this->injection_serializer_ = &injection;
}

void inject_one_type_sskel::
slot_serializer (::xml_schema::token_sskel& slot)
{
  this->slot_serializer_ = &slot;
}

void inject_one_type_sskel::
serializers (::xml_schema::token_sskel& injection,
             ::xml_schema::token_sskel& slot)
{
  this->injection_serializer_ = &injection;
  this->slot_serializer_ = &slot;
}

inject_one_type_sskel::
inject_one_type_sskel ()
: inject_one_type_impl_ (0),
  injection_serializer_ (0),
  slot_serializer_ (0)
{
}

inject_one_type_sskel::
inject_one_type_sskel (inject_one_type_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  inject_one_type_impl_ (impl),
  injection_serializer_ (0),
  slot_serializer_ (0)
{
}

// inject_all_type_sskel
//

void inject_all_type_sskel::
receiver_serializer (::xml_schema::token_sskel& receiver)
{
  this->receiver_serializer_ = &receiver;
}

void inject_all_type_sskel::
slot_serializer (::xml_schema::token_sskel& slot)
{
  this->slot_serializer_ = &slot;
}

void inject_all_type_sskel::
serializers (::xml_schema::token_sskel& receiver,
             ::xml_schema::token_sskel& slot)
{
  this->receiver_serializer_ = &receiver;
  this->slot_serializer_ = &slot;
}

inject_all_type_sskel::
inject_all_type_sskel ()
: inject_all_type_impl_ (0),
  receiver_serializer_ (0),
  slot_serializer_ (0)
{
}

inject_all_type_sskel::
inject_all_type_sskel (inject_all_type_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  inject_all_type_impl_ (impl),
  receiver_serializer_ (0),
  slot_serializer_ (0)
{
}

// component_sskel
//

void component_sskel::
name_serializer (::xml_schema::token_sskel& name)
{
  this->name_serializer_ = &name;
}

void component_sskel::
class__serializer (::xml_schema::token_sskel& class_)
{
  this->class__serializer_ = &class_;
}

void component_sskel::
attribute_serializer (::attribute_type_sskel& s)
{
  this->attribute_serializer_ = &s;
}

void component_sskel::
serializers (::xml_schema::token_sskel& name,
             ::xml_schema::token_sskel& class_,
             ::attribute_type_sskel& attribute)
{
  this->name_serializer_ = &name;
  this->class__serializer_ = &class_;
  this->attribute_serializer_ = &attribute;
}

component_sskel::
component_sskel ()
: component_impl_ (0),
  name_serializer_ (0),
  class__serializer_ (0),
  attribute_serializer_ (0)
{
}

component_sskel::
component_sskel (component_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  component_impl_ (impl),
  name_serializer_ (0),
  class__serializer_ (0),
  attribute_serializer_ (0)
{
}

// inject_sskel
//

void inject_sskel::
receiver_serializer (::xml_schema::token_sskel& receiver)
{
  this->receiver_serializer_ = &receiver;
}

void inject_sskel::
injection_serializer (::xml_schema::token_sskel& injection)
{
  this->injection_serializer_ = &injection;
}

void inject_sskel::
slot_serializer (::xml_schema::token_sskel& slot)
{
  this->slot_serializer_ = &slot;
}

void inject_sskel::
serializers (::xml_schema::token_sskel& receiver,
             ::xml_schema::token_sskel& injection,
             ::xml_schema::token_sskel& slot)
{
  this->receiver_serializer_ = &receiver;
  this->injection_serializer_ = &injection;
  this->slot_serializer_ = &slot;
}

inject_sskel::
inject_sskel ()
: inject_impl_ (0),
  receiver_serializer_ (0),
  injection_serializer_ (0),
  slot_serializer_ (0)
{
}

inject_sskel::
inject_sskel (inject_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  inject_impl_ (impl),
  receiver_serializer_ (0),
  injection_serializer_ (0),
  slot_serializer_ (0)
{
}

// inject_one_sskel
//

void inject_one_sskel::
receiver_serializer (::xml_schema::token_sskel& receiver)
{
  this->receiver_serializer_ = &receiver;
}

void inject_one_sskel::
inject_serializer (::inject_one_type_sskel& s)
{
  this->inject_serializer_ = &s;
}

void inject_one_sskel::
serializers (::xml_schema::token_sskel& receiver,
             ::inject_one_type_sskel& inject)
{
  this->receiver_serializer_ = &receiver;
  this->inject_serializer_ = &inject;
}

inject_one_sskel::
inject_one_sskel ()
: inject_one_impl_ (0),
  receiver_serializer_ (0),
  inject_serializer_ (0)
{
}

inject_one_sskel::
inject_one_sskel (inject_one_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  inject_one_impl_ (impl),
  receiver_serializer_ (0),
  inject_serializer_ (0)
{
}

// inject_all_sskel
//

void inject_all_sskel::
injection_serializer (::xml_schema::token_sskel& injection)
{
  this->injection_serializer_ = &injection;
}

void inject_all_sskel::
inject_serializer (::inject_all_type_sskel& s)
{
  this->inject_serializer_ = &s;
}

void inject_all_sskel::
serializers (::xml_schema::token_sskel& injection,
             ::inject_all_type_sskel& inject)
{
  this->injection_serializer_ = &injection;
  this->inject_serializer_ = &inject;
}

inject_all_sskel::
inject_all_sskel ()
: inject_all_impl_ (0),
  injection_serializer_ (0),
  inject_serializer_ (0)
{
}

inject_all_sskel::
inject_all_sskel (inject_all_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  inject_all_impl_ (impl),
  injection_serializer_ (0),
  inject_serializer_ (0)
{
}

// inject_slot_sskel
//

void inject_slot_sskel::
slot_serializer (::xml_schema::token_sskel& slot)
{
  this->slot_serializer_ = &slot;
}

void inject_slot_sskel::
injection_serializer (::xml_schema::token_sskel& injection)
{
  this->injection_serializer_ = &injection;
}

void inject_slot_sskel::
serializers (::xml_schema::token_sskel& slot,
             ::xml_schema::token_sskel& injection)
{
  this->slot_serializer_ = &slot;
  this->injection_serializer_ = &injection;
}

inject_slot_sskel::
inject_slot_sskel ()
: inject_slot_impl_ (0),
  slot_serializer_ (0),
  injection_serializer_ (0)
{
}

inject_slot_sskel::
inject_slot_sskel (inject_slot_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  inject_slot_impl_ (impl),
  slot_serializer_ (0),
  injection_serializer_ (0)
{
}

// DI_sskel
//

void DI_sskel::
plugins_serializer (::plugins_sskel& s)
{
  this->plugins_serializer_ = &s;
}

void DI_sskel::
components_serializer (::components_sskel& s)
{
  this->components_serializer_ = &s;
}

void DI_sskel::
wiring_serializer (::wiring_sskel& s)
{
  this->wiring_serializer_ = &s;
}

void DI_sskel::
serializers (::plugins_sskel& plugins,
             ::components_sskel& components,
             ::wiring_sskel& wiring)
{
  this->plugins_serializer_ = &plugins;
  this->components_serializer_ = &components;
  this->wiring_serializer_ = &wiring;
}

DI_sskel::
DI_sskel ()
: DI_impl_ (0),
  plugins_serializer_ (0),
  components_serializer_ (0),
  wiring_serializer_ (0)
{
}

DI_sskel::
DI_sskel (DI_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  DI_impl_ (impl),
  plugins_serializer_ (0),
  components_serializer_ (0),
  wiring_serializer_ (0)
{
}

// shared_sskel
//

void shared_sskel::
lib_serializer (::xml_schema::name_sskel& lib)
{
  this->lib_serializer_ = &lib;
}

void shared_sskel::
serializers (::xml_schema::name_sskel& lib)
{
  this->lib_serializer_ = &lib;
}

shared_sskel::
shared_sskel ()
: shared_impl_ (0),
  lib_serializer_ (0)
{
}

shared_sskel::
shared_sskel (shared_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  shared_impl_ (impl),
  lib_serializer_ (0)
{
}

// plugins_sskel
//

void plugins_sskel::
shared_serializer (::shared_sskel& s)
{
  this->shared_serializer_ = &s;
}

void plugins_sskel::
serializers (::shared_sskel& shared)
{
  this->shared_serializer_ = &shared;
}

plugins_sskel::
plugins_sskel ()
: plugins_impl_ (0),
  shared_serializer_ (0)
{
}

plugins_sskel::
plugins_sskel (plugins_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  plugins_impl_ (impl),
  shared_serializer_ (0)
{
}

// components_sskel
//

void components_sskel::
component_serializer (::component_sskel& s)
{
  this->component_serializer_ = &s;
}

void components_sskel::
serializers (::component_sskel& component)
{
  this->component_serializer_ = &component;
}

components_sskel::
components_sskel ()
: components_impl_ (0),
  component_serializer_ (0)
{
}

components_sskel::
components_sskel (components_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  components_impl_ (impl),
  component_serializer_ (0)
{
}

// wiring_sskel
//

void wiring_sskel::
inject_serializer (::inject_sskel& s)
{
  this->inject_serializer_ = &s;
}

void wiring_sskel::
inject_all_serializer (::inject_all_sskel& s)
{
  this->inject_all_serializer_ = &s;
}

void wiring_sskel::
inject_one_serializer (::inject_one_sskel& s)
{
  this->inject_one_serializer_ = &s;
}

void wiring_sskel::
inject_slot_serializer (::inject_slot_sskel& s)
{
  this->inject_slot_serializer_ = &s;
}

void wiring_sskel::
serializers (::inject_sskel& inject,
             ::inject_all_sskel& inject_all,
             ::inject_one_sskel& inject_one,
             ::inject_slot_sskel& inject_slot)
{
  this->inject_serializer_ = &inject;
  this->inject_all_serializer_ = &inject_all;
  this->inject_one_serializer_ = &inject_one;
  this->inject_slot_serializer_ = &inject_slot;
}

wiring_sskel::
wiring_sskel ()
: wiring_impl_ (0),
  inject_serializer_ (0),
  inject_all_serializer_ (0),
  inject_one_serializer_ (0),
  inject_slot_serializer_ (0)
{
}

wiring_sskel::
wiring_sskel (wiring_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  wiring_impl_ (impl),
  inject_serializer_ (0),
  inject_all_serializer_ (0),
  inject_one_serializer_ (0),
  inject_slot_serializer_ (0)
{
}

#include <assert.h>

// param_class_type_sskel
//

void param_class_type_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

const char* const param_class_type_sskel::_xsde_param_class_type_sskel_enums_[8UL] = 
{
  "bool",
  "char",
  "double",
  "int",
  "long",
  "string",
  "unsigned char",
  "unsigned int"
};

// insert_sskel
//

void insert_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->value_serializer_)
    this->value_serializer_->_reset ();
}

// attribute_type_sskel
//

bool attribute_type_sskel::
value_present ()
{
  return this->attribute_type_impl_ ? this->attribute_type_impl_->value_present () : false;
}

bool attribute_type_sskel::
insert_next ()
{
  return this->attribute_type_impl_ ? this->attribute_type_impl_->insert_next () : false;
}

void attribute_type_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->value_serializer_)
    this->value_serializer_->_reset ();

  this->resetting_ = true;

  if (this->insert_serializer_)
    this->insert_serializer_->_reset ();

  this->resetting_ = false;
}

// param_type_sskel
//

bool param_type_sskel::
type_present ()
{
  return this->param_type_impl_ ? this->param_type_impl_->type_present () : false;
}

bool param_type_sskel::
value_present ()
{
  return this->param_type_impl_ ? this->param_type_impl_->value_present () : false;
}

void param_type_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->value_serializer_)
    this->value_serializer_->_reset ();
}

// inject_one_type_sskel
//

void inject_one_type_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->injection_serializer_)
    this->injection_serializer_->_reset ();

  if (this->slot_serializer_)
    this->slot_serializer_->_reset ();
}

// inject_all_type_sskel
//

void inject_all_type_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->receiver_serializer_)
    this->receiver_serializer_->_reset ();

  if (this->slot_serializer_)
    this->slot_serializer_->_reset ();
}

// component_sskel
//

bool component_sskel::
attribute_next ()
{
  return this->component_impl_ ? this->component_impl_->attribute_next () : false;
}

void component_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->class__serializer_)
    this->class__serializer_->_reset ();

  this->resetting_ = true;

  if (this->attribute_serializer_)
    this->attribute_serializer_->_reset ();

  this->resetting_ = false;
}

// inject_sskel
//

void inject_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->receiver_serializer_)
    this->receiver_serializer_->_reset ();

  if (this->injection_serializer_)
    this->injection_serializer_->_reset ();

  if (this->slot_serializer_)
    this->slot_serializer_->_reset ();
}

// inject_one_sskel
//

void inject_one_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->receiver_serializer_)
    this->receiver_serializer_->_reset ();

  this->resetting_ = true;

  if (this->inject_serializer_)
    this->inject_serializer_->_reset ();

  this->resetting_ = false;
}

// inject_all_sskel
//

void inject_all_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->injection_serializer_)
    this->injection_serializer_->_reset ();

  this->resetting_ = true;

  if (this->inject_serializer_)
    this->inject_serializer_->_reset ();

  this->resetting_ = false;
}

// inject_slot_sskel
//

void inject_slot_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->slot_serializer_)
    this->slot_serializer_->_reset ();

  if (this->injection_serializer_)
    this->injection_serializer_->_reset ();
}

// DI_sskel
//

bool DI_sskel::
plugins_present ()
{
  return this->DI_impl_ ? this->DI_impl_->plugins_present () : false;
}

bool DI_sskel::
components_present ()
{
  return this->DI_impl_ ? this->DI_impl_->components_present () : false;
}

bool DI_sskel::
wiring_present ()
{
  return this->DI_impl_ ? this->DI_impl_->wiring_present () : false;
}

void DI_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->plugins_serializer_)
    this->plugins_serializer_->_reset ();

  if (this->components_serializer_)
    this->components_serializer_->_reset ();

  if (this->wiring_serializer_)
    this->wiring_serializer_->_reset ();

  this->resetting_ = false;
}

// shared_sskel
//

void shared_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->lib_serializer_)
    this->lib_serializer_->_reset ();
}

// plugins_sskel
//

bool plugins_sskel::
shared_next ()
{
  return this->plugins_impl_ ? this->plugins_impl_->shared_next () : false;
}

void plugins_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->shared_serializer_)
    this->shared_serializer_->_reset ();

  this->resetting_ = false;
}

// components_sskel
//

void components_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->component_serializer_)
    this->component_serializer_->_reset ();

  this->resetting_ = false;
}

// wiring_sskel
//

bool wiring_sskel::
inject_next ()
{
  return this->wiring_impl_ ? this->wiring_impl_->inject_next () : false;
}

bool wiring_sskel::
inject_all_next ()
{
  return this->wiring_impl_ ? this->wiring_impl_->inject_all_next () : false;
}

bool wiring_sskel::
inject_one_next ()
{
  return this->wiring_impl_ ? this->wiring_impl_->inject_one_next () : false;
}

bool wiring_sskel::
inject_slot_next ()
{
  return this->wiring_impl_ ? this->wiring_impl_->inject_slot_next () : false;
}

void wiring_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->inject_serializer_)
    this->inject_serializer_->_reset ();

  if (this->inject_all_serializer_)
    this->inject_all_serializer_->_reset ();

  if (this->inject_one_serializer_)
    this->inject_one_serializer_->_reset ();

  if (this->inject_slot_serializer_)
    this->inject_slot_serializer_->_reset ();

  this->resetting_ = false;
}

// Element validation and serialization for attribute_type_sskel.
//
void attribute_type_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // insert
  //
  while (this->insert_next ())
  {
    const ::insert& r = this->insert ();

    if (this->insert_serializer_)
    {
      this->insert_serializer_->pre (r);
      this->_start_element ("insert");
      this->insert_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->insert_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->insert_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->insert_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->insert_serializer_->post ();
    }
  }
}

// Element validation and serialization for component_sskel.
//
void component_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // attribute
  //
  while (this->attribute_next ())
  {
    const ::attribute_type& r = this->attribute ();

    if (this->attribute_serializer_)
    {
      this->attribute_serializer_->pre (r);
      this->_start_element ("attribute");
      this->attribute_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->attribute_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->attribute_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->attribute_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->attribute_serializer_->post ();
    }
  }
}

// Element validation and serialization for inject_one_sskel.
//
void inject_one_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // inject
  //
  {
    size_t i = 0;
    for (; this->inject_next (); ++i)
    {
      const ::inject_one_type& r = this->inject ();

      if (this->inject_serializer_)
      {
        this->inject_serializer_->pre (r);
        this->_start_element ("inject");
        this->inject_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->inject_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->inject_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->inject_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->inject_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for inject_all_sskel.
//
void inject_all_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // inject
  //
  {
    size_t i = 0;
    for (; this->inject_next (); ++i)
    {
      const ::inject_all_type& r = this->inject ();

      if (this->inject_serializer_)
      {
        this->inject_serializer_->pre (r);
        this->_start_element ("inject");
        this->inject_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->inject_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->inject_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->inject_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->inject_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for DI_sskel.
//
void DI_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // plugins
  //
  if (this->plugins_present ())
  {
    const ::plugins& r = this->plugins ();

    if (this->plugins_serializer_)
    {
      this->plugins_serializer_->pre (r);
      this->_start_element ("plugins");
      this->plugins_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->plugins_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->plugins_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->plugins_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->plugins_serializer_->post ();
    }
  }

  // components
  //
  if (this->components_present ())
  {
    const ::components& r = this->components ();

    if (this->components_serializer_)
    {
      this->components_serializer_->pre (r);
      this->_start_element ("components");
      this->components_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->components_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->components_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->components_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->components_serializer_->post ();
    }
  }

  // wiring
  //
  if (this->wiring_present ())
  {
    const ::wiring& r = this->wiring ();

    if (this->wiring_serializer_)
    {
      this->wiring_serializer_->pre (r);
      this->_start_element ("wiring");
      this->wiring_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->wiring_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->wiring_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->wiring_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->wiring_serializer_->post ();
    }
  }
}

// Element validation and serialization for plugins_sskel.
//
void plugins_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // shared
  //
  while (this->shared_next ())
  {
    const ::shared& r = this->shared ();

    if (this->shared_serializer_)
    {
      this->shared_serializer_->pre (r);
      this->_start_element ("shared");
      this->shared_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->shared_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->shared_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->shared_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->shared_serializer_->post ();
    }
  }
}

// Element validation and serialization for components_sskel.
//
void components_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // component
  //
  {
    size_t i = 0;
    for (; this->component_next (); ++i)
    {
      const ::component& r = this->component ();

      if (this->component_serializer_)
      {
        this->component_serializer_->pre (r);
        this->_start_element ("component");
        this->component_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->component_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->component_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->component_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->component_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for wiring_sskel.
//
void wiring_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // inject
  //
  while (this->inject_next ())
  {
    const ::inject& r = this->inject ();

    if (this->inject_serializer_)
    {
      this->inject_serializer_->pre (r);
      this->_start_element ("inject");
      this->inject_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->inject_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->inject_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->inject_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->inject_serializer_->post ();
    }
  }

  // inject_all
  //
  while (this->inject_all_next ())
  {
    const ::inject_all& r = this->inject_all ();

    if (this->inject_all_serializer_)
    {
      this->inject_all_serializer_->pre (r);
      this->_start_element ("inject-all");
      this->inject_all_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->inject_all_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->inject_all_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->inject_all_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->inject_all_serializer_->post ();
    }
  }

  // inject_one
  //
  while (this->inject_one_next ())
  {
    const ::inject_one& r = this->inject_one ();

    if (this->inject_one_serializer_)
    {
      this->inject_one_serializer_->pre (r);
      this->_start_element ("inject-one");
      this->inject_one_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->inject_one_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->inject_one_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->inject_one_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->inject_one_serializer_->post ();
    }
  }

  // inject_slot
  //
  while (this->inject_slot_next ())
  {
    const ::inject_slot& r = this->inject_slot ();

    if (this->inject_slot_serializer_)
    {
      this->inject_slot_serializer_->pre (r);
      this->_start_element ("inject-slot");
      this->inject_slot_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->inject_slot_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->inject_slot_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->inject_slot_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->inject_slot_serializer_->post ();
    }
  }
}

// Attribute validation and serialization for insert_sskel.
//
void insert_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // value
  //
  {
    const ::std::string& r = this->value ();

    if (this->value_serializer_)
    {
      this->value_serializer_->pre (r);
      this->_start_attribute ("value");
      this->value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->value_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for attribute_type_sskel.
//
void attribute_type_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // name
  //
  {
    const ::std::string& r = this->name ();

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);
      this->_start_attribute ("name");
      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // value
  //
  if (this->value_present ())
  {
    const ::std::string& r = this->value ();

    if (this->value_serializer_)
    {
      this->value_serializer_->pre (r);
      this->_start_attribute ("value");
      this->value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->value_serializer_->post ();
    }
  }
}

// Attribute validation and serialization for param_type_sskel.
//
void param_type_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // type
  //
  if (this->type_present ())
  {
    const ::param_class_type& r = this->type ();

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);
      this->_start_attribute ("type");
      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->type_serializer_->post ();
    }
  }

  // value
  //
  if (this->value_present ())
  {
    const ::std::string& r = this->value ();

    if (this->value_serializer_)
    {
      this->value_serializer_->pre (r);
      this->_start_attribute ("value");
      this->value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->value_serializer_->post ();
    }
  }
}

// Attribute validation and serialization for inject_one_type_sskel.
//
void inject_one_type_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // injection
  //
  {
    const ::std::string& r = this->injection ();

    if (this->injection_serializer_)
    {
      this->injection_serializer_->pre (r);
      this->_start_attribute ("injection");
      this->injection_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->injection_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // slot
  //
  {
    const ::std::string& r = this->slot ();

    if (this->slot_serializer_)
    {
      this->slot_serializer_->pre (r);
      this->_start_attribute ("slot");
      this->slot_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->slot_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for inject_all_type_sskel.
//
void inject_all_type_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // receiver
  //
  {
    const ::std::string& r = this->receiver ();

    if (this->receiver_serializer_)
    {
      this->receiver_serializer_->pre (r);
      this->_start_attribute ("receiver");
      this->receiver_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->receiver_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->receiver_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->receiver_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // slot
  //
  {
    const ::std::string& r = this->slot ();

    if (this->slot_serializer_)
    {
      this->slot_serializer_->pre (r);
      this->_start_attribute ("slot");
      this->slot_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->slot_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for component_sskel.
//
void component_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // name
  //
  {
    const ::std::string& r = this->name ();

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);
      this->_start_attribute ("name");
      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // class_
  //
  {
    const ::std::string& r = this->class_ ();

    if (this->class__serializer_)
    {
      this->class__serializer_->pre (r);
      this->_start_attribute ("class");
      this->class__serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->class__serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->class__serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->class__serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for inject_sskel.
//
void inject_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // receiver
  //
  {
    const ::std::string& r = this->receiver ();

    if (this->receiver_serializer_)
    {
      this->receiver_serializer_->pre (r);
      this->_start_attribute ("receiver");
      this->receiver_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->receiver_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->receiver_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->receiver_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // injection
  //
  {
    const ::std::string& r = this->injection ();

    if (this->injection_serializer_)
    {
      this->injection_serializer_->pre (r);
      this->_start_attribute ("injection");
      this->injection_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->injection_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // slot
  //
  {
    const ::std::string& r = this->slot ();

    if (this->slot_serializer_)
    {
      this->slot_serializer_->pre (r);
      this->_start_attribute ("slot");
      this->slot_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->slot_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for inject_one_sskel.
//
void inject_one_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // receiver
  //
  {
    const ::std::string& r = this->receiver ();

    if (this->receiver_serializer_)
    {
      this->receiver_serializer_->pre (r);
      this->_start_attribute ("receiver");
      this->receiver_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->receiver_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->receiver_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->receiver_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for inject_all_sskel.
//
void inject_all_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // injection
  //
  {
    const ::std::string& r = this->injection ();

    if (this->injection_serializer_)
    {
      this->injection_serializer_->pre (r);
      this->_start_attribute ("injection");
      this->injection_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->injection_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for inject_slot_sskel.
//
void inject_slot_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // slot
  //
  {
    const ::std::string& r = this->slot ();

    if (this->slot_serializer_)
    {
      this->slot_serializer_->pre (r);
      this->_start_attribute ("slot");
      this->slot_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->slot_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->slot_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // injection
  //
  {
    const ::std::string& r = this->injection ();

    if (this->injection_serializer_)
    {
      this->injection_serializer_->pre (r);
      this->_start_attribute ("injection");
      this->injection_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->injection_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->injection_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for shared_sskel.
//
void shared_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // lib
  //
  {
    const ::std::string& r = this->lib ();

    if (this->lib_serializer_)
    {
      this->lib_serializer_->pre (r);
      this->_start_attribute ("lib");
      this->lib_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->lib_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->lib_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->lib_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

