// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "di-simpl.hxx"

#include <xsde/cxx/serializer/validating/string-common.hxx>

// param_class_type_simpl
//

param_class_type_simpl::
param_class_type_simpl ()
: param_class_type_sskel (0)
{
}

void param_class_type_simpl::
pre (const ::param_class_type& x)
{
  this->param_class_type_simpl_state_ = &x;
}

void param_class_type_simpl::
_serialize_content ()
{
  if (::xsde::cxx::serializer::validating::string_common::validate_facets (
        this->param_class_type_simpl_state_->string1 (),
        this->_facets (),
        this->_context ()))
    this->_characters (this->param_class_type_simpl_state_->string1 ());
}

// insert_simpl
//

void insert_simpl::
pre (const ::insert& x)
{
  this->insert_simpl_state_.insert_ = &x;
}

::std::string insert_simpl::
value ()
{
  return this->insert_simpl_state_.insert_->value ();
}

// attribute_type_simpl
//

void attribute_type_simpl::
pre (const ::attribute_type& x)
{
  this->attribute_type_simpl_state_.attribute_type_ = &x;
  this->attribute_type_simpl_state_.insert_ = 
  this->attribute_type_simpl_state_.attribute_type_->insert ().begin ();
  this->attribute_type_simpl_state_.insert_end_ = 
  this->attribute_type_simpl_state_.attribute_type_->insert ().end ();
}

::std::string attribute_type_simpl::
name ()
{
  return this->attribute_type_simpl_state_.attribute_type_->name ();
}

bool attribute_type_simpl::
value_present ()
{
  return this->attribute_type_simpl_state_.attribute_type_->value_present ();
}

::std::string attribute_type_simpl::
value ()
{
  return this->attribute_type_simpl_state_.attribute_type_->value ();
}

bool attribute_type_simpl::
insert_next ()
{
  return this->attribute_type_simpl_state_.insert_ != 
  this->attribute_type_simpl_state_.insert_end_;
}

const ::insert& attribute_type_simpl::
insert ()
{
  return *this->attribute_type_simpl_state_.insert_++;
}

// param_type_simpl
//

void param_type_simpl::
pre (const ::param_type& x)
{
  this->param_type_simpl_state_.param_type_ = &x;
}

bool param_type_simpl::
type_present ()
{
  return this->param_type_simpl_state_.param_type_->type_present ();
}

const ::param_class_type& param_type_simpl::
type ()
{
  return this->param_type_simpl_state_.param_type_->type ();
}

bool param_type_simpl::
value_present ()
{
  return this->param_type_simpl_state_.param_type_->value_present ();
}

::std::string param_type_simpl::
value ()
{
  return this->param_type_simpl_state_.param_type_->value ();
}

// inject_one_type_simpl
//

void inject_one_type_simpl::
pre (const ::inject_one_type& x)
{
  this->inject_one_type_simpl_state_.inject_one_type_ = &x;
}

::std::string inject_one_type_simpl::
injection ()
{
  return this->inject_one_type_simpl_state_.inject_one_type_->injection ();
}

::std::string inject_one_type_simpl::
slot ()
{
  return this->inject_one_type_simpl_state_.inject_one_type_->slot ();
}

// inject_all_type_simpl
//

void inject_all_type_simpl::
pre (const ::inject_all_type& x)
{
  this->inject_all_type_simpl_state_.inject_all_type_ = &x;
}

::std::string inject_all_type_simpl::
receiver ()
{
  return this->inject_all_type_simpl_state_.inject_all_type_->receiver ();
}

::std::string inject_all_type_simpl::
slot ()
{
  return this->inject_all_type_simpl_state_.inject_all_type_->slot ();
}

// component_simpl
//

void component_simpl::
pre (const ::component& x)
{
  this->component_simpl_state_.component_ = &x;
  this->component_simpl_state_.attribute_ = 
  this->component_simpl_state_.component_->attribute ().begin ();
  this->component_simpl_state_.attribute_end_ = 
  this->component_simpl_state_.component_->attribute ().end ();
}

::std::string component_simpl::
name ()
{
  return this->component_simpl_state_.component_->name ();
}

::std::string component_simpl::
class_ ()
{
  return this->component_simpl_state_.component_->class_ ();
}

bool component_simpl::
attribute_next ()
{
  return this->component_simpl_state_.attribute_ != 
  this->component_simpl_state_.attribute_end_;
}

const ::attribute_type& component_simpl::
attribute ()
{
  return *this->component_simpl_state_.attribute_++;
}

// inject_simpl
//

void inject_simpl::
pre (const ::inject& x)
{
  this->inject_simpl_state_.inject_ = &x;
}

::std::string inject_simpl::
receiver ()
{
  return this->inject_simpl_state_.inject_->receiver ();
}

::std::string inject_simpl::
injection ()
{
  return this->inject_simpl_state_.inject_->injection ();
}

::std::string inject_simpl::
slot ()
{
  return this->inject_simpl_state_.inject_->slot ();
}

// inject_one_simpl
//

void inject_one_simpl::
pre (const ::inject_one& x)
{
  this->inject_one_simpl_state_.inject_one_ = &x;
  this->inject_one_simpl_state_.inject_ = 
  this->inject_one_simpl_state_.inject_one_->inject ().begin ();
  this->inject_one_simpl_state_.inject_end_ = 
  this->inject_one_simpl_state_.inject_one_->inject ().end ();
}

::std::string inject_one_simpl::
receiver ()
{
  return this->inject_one_simpl_state_.inject_one_->receiver ();
}

bool inject_one_simpl::
inject_next ()
{
  return this->inject_one_simpl_state_.inject_ != 
  this->inject_one_simpl_state_.inject_end_;
}

const ::inject_one_type& inject_one_simpl::
inject ()
{
  return *this->inject_one_simpl_state_.inject_++;
}

// inject_all_simpl
//

void inject_all_simpl::
pre (const ::inject_all& x)
{
  this->inject_all_simpl_state_.inject_all_ = &x;
  this->inject_all_simpl_state_.inject_ = 
  this->inject_all_simpl_state_.inject_all_->inject ().begin ();
  this->inject_all_simpl_state_.inject_end_ = 
  this->inject_all_simpl_state_.inject_all_->inject ().end ();
}

::std::string inject_all_simpl::
injection ()
{
  return this->inject_all_simpl_state_.inject_all_->injection ();
}

bool inject_all_simpl::
inject_next ()
{
  return this->inject_all_simpl_state_.inject_ != 
  this->inject_all_simpl_state_.inject_end_;
}

const ::inject_all_type& inject_all_simpl::
inject ()
{
  return *this->inject_all_simpl_state_.inject_++;
}

// inject_slot_simpl
//

void inject_slot_simpl::
pre (const ::inject_slot& x)
{
  this->inject_slot_simpl_state_.inject_slot_ = &x;
}

::std::string inject_slot_simpl::
slot ()
{
  return this->inject_slot_simpl_state_.inject_slot_->slot ();
}

::std::string inject_slot_simpl::
injection ()
{
  return this->inject_slot_simpl_state_.inject_slot_->injection ();
}

// DI_simpl
//

void DI_simpl::
pre (const ::DI& x)
{
  this->DI_simpl_state_.DI_ = &x;
}

bool DI_simpl::
plugins_present ()
{
  return this->DI_simpl_state_.DI_->plugins_present ();
}

const ::plugins& DI_simpl::
plugins ()
{
  return this->DI_simpl_state_.DI_->plugins ();
}

bool DI_simpl::
components_present ()
{
  return this->DI_simpl_state_.DI_->components_present ();
}

const ::components& DI_simpl::
components ()
{
  return this->DI_simpl_state_.DI_->components ();
}

bool DI_simpl::
wiring_present ()
{
  return this->DI_simpl_state_.DI_->wiring_present ();
}

const ::wiring& DI_simpl::
wiring ()
{
  return this->DI_simpl_state_.DI_->wiring ();
}

// shared_simpl
//

void shared_simpl::
pre (const ::shared& x)
{
  this->shared_simpl_state_.shared_ = &x;
}

::std::string shared_simpl::
lib ()
{
  return this->shared_simpl_state_.shared_->lib ();
}

// plugins_simpl
//

void plugins_simpl::
pre (const ::plugins& x)
{
  this->plugins_simpl_state_.plugins_ = &x;
  this->plugins_simpl_state_.shared_ = 
  this->plugins_simpl_state_.plugins_->shared ().begin ();
  this->plugins_simpl_state_.shared_end_ = 
  this->plugins_simpl_state_.plugins_->shared ().end ();
}

bool plugins_simpl::
shared_next ()
{
  return this->plugins_simpl_state_.shared_ != 
  this->plugins_simpl_state_.shared_end_;
}

const ::shared& plugins_simpl::
shared ()
{
  return *this->plugins_simpl_state_.shared_++;
}

// components_simpl
//

void components_simpl::
pre (const ::components& x)
{
  this->components_simpl_state_.components_ = &x;
  this->components_simpl_state_.component_ = 
  this->components_simpl_state_.components_->component ().begin ();
  this->components_simpl_state_.component_end_ = 
  this->components_simpl_state_.components_->component ().end ();
}

bool components_simpl::
component_next ()
{
  return this->components_simpl_state_.component_ != 
  this->components_simpl_state_.component_end_;
}

const ::component& components_simpl::
component ()
{
  return *this->components_simpl_state_.component_++;
}

// wiring_simpl
//

void wiring_simpl::
pre (const ::wiring& x)
{
  this->wiring_simpl_state_.wiring_ = &x;
  this->wiring_simpl_state_.inject_ = 
  this->wiring_simpl_state_.wiring_->inject ().begin ();
  this->wiring_simpl_state_.inject_end_ = 
  this->wiring_simpl_state_.wiring_->inject ().end ();
  this->wiring_simpl_state_.inject_all_ = 
  this->wiring_simpl_state_.wiring_->inject_all ().begin ();
  this->wiring_simpl_state_.inject_all_end_ = 
  this->wiring_simpl_state_.wiring_->inject_all ().end ();
  this->wiring_simpl_state_.inject_one_ = 
  this->wiring_simpl_state_.wiring_->inject_one ().begin ();
  this->wiring_simpl_state_.inject_one_end_ = 
  this->wiring_simpl_state_.wiring_->inject_one ().end ();
  this->wiring_simpl_state_.inject_slot_ = 
  this->wiring_simpl_state_.wiring_->inject_slot ().begin ();
  this->wiring_simpl_state_.inject_slot_end_ = 
  this->wiring_simpl_state_.wiring_->inject_slot ().end ();
}

bool wiring_simpl::
inject_next ()
{
  return this->wiring_simpl_state_.inject_ != 
  this->wiring_simpl_state_.inject_end_;
}

const ::inject& wiring_simpl::
inject ()
{
  return *this->wiring_simpl_state_.inject_++;
}

bool wiring_simpl::
inject_all_next ()
{
  return this->wiring_simpl_state_.inject_all_ != 
  this->wiring_simpl_state_.inject_all_end_;
}

const ::inject_all& wiring_simpl::
inject_all ()
{
  return *this->wiring_simpl_state_.inject_all_++;
}

bool wiring_simpl::
inject_one_next ()
{
  return this->wiring_simpl_state_.inject_one_ != 
  this->wiring_simpl_state_.inject_one_end_;
}

const ::inject_one& wiring_simpl::
inject_one ()
{
  return *this->wiring_simpl_state_.inject_one_++;
}

bool wiring_simpl::
inject_slot_next ()
{
  return this->wiring_simpl_state_.inject_slot_ != 
  this->wiring_simpl_state_.inject_slot_end_;
}

const ::inject_slot& wiring_simpl::
inject_slot ()
{
  return *this->wiring_simpl_state_.inject_slot_++;
}

// DI_saggr
//

DI_saggr::
DI_saggr ()
{
  this->component_s_.serializers (this->token_s_,
                                  this->token_s_,
                                  this->attribute_type_s_);

  this->inject_s_.serializers (this->token_s_,
                               this->token_s_,
                               this->token_s_);

  this->inject_one_type_s_.serializers (this->token_s_,
                                        this->token_s_);

  this->inject_one_s_.serializers (this->token_s_,
                                   this->inject_one_type_s_);

  this->inject_all_type_s_.serializers (this->token_s_,
                                        this->token_s_);

  this->inject_all_s_.serializers (this->token_s_,
                                   this->inject_all_type_s_);

  this->inject_slot_s_.serializers (this->token_s_,
                                    this->token_s_);

  this->DI_s_.serializers (this->plugins_s_,
                           this->components_s_,
                           this->wiring_s_);

  this->plugins_s_.serializers (this->shared_s_);

  this->shared_s_.serializers (this->name_s_);

  this->components_s_.serializers (this->component_s_);

  this->wiring_s_.serializers (this->inject_s_,
                               this->inject_all_s_,
                               this->inject_one_s_,
                               this->inject_slot_s_);

  this->attribute_type_s_.serializers (this->token_s_,
                                       this->string_s_,
                                       this->insert_s_);

  this->insert_s_.serializers (this->string_s_);
}

const char* DI_saggr::
root_name ()
{
  return "DI";
}

const char* DI_saggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

