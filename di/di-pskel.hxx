// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_DI_DI_PSKEL_HXX
#define E__VS14PRJBKP_ENGINE_DI_DI_PSKEL_HXX

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
class param_class_type_pskel;
class insert_pskel;
class attribute_type_pskel;
class param_type_pskel;
class inject_one_type_pskel;
class inject_all_type_pskel;
class component_pskel;
class inject_pskel;
class inject_one_pskel;
class inject_all_pskel;
class inject_slot_pskel;
class DI_pskel;
class shared_pskel;
class plugins_pskel;
class components_pskel;
class wiring_pskel;

#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "di.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

class param_class_type_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual ::param_class_type
  post_param_class_type () = 0;

  // Constructor.
  //
  param_class_type_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  param_class_type_pskel* param_class_type_impl_;
  param_class_type_pskel (param_class_type_pskel*, void*);

  protected:
  static const char* const _xsde_param_class_type_pskel_enums_[8UL];
};

class insert_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  value (const ::std::string&);

  virtual ::insert
  post_insert () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* value */);

  // Individual attribute parsers.
  //
  void
  value_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  insert_pskel ();

  // Implementation details.
  //
  protected:
  insert_pskel* insert_impl_;
  insert_pskel (insert_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* value_parser_;

  protected:
  struct v_state_attr_
  {
    bool value;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class attribute_type_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  value (const ::std::string&);

  // Elements.
  //
  virtual void
  insert (const ::insert&);

  virtual ::attribute_type*
  post_attribute_type () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* name */,
           ::xml_schema::string_pskel& /* value */,
           ::insert_pskel& /* insert */);

  // Individual attribute parsers.
  //
  void
  name_parser (::xml_schema::token_pskel&);

  void
  value_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  insert_parser (::insert_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  attribute_type_pskel ();

  // Implementation details.
  //
  protected:
  attribute_type_pskel* attribute_type_impl_;
  attribute_type_pskel (attribute_type_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* name_parser_;
  ::xml_schema::string_pskel* value_parser_;
  ::insert_pskel* insert_parser_;

  public:
  struct v_state_descr_
  {
    void (::attribute_type_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool name;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class param_type_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  type (const ::param_class_type&);

  virtual void
  value (const ::std::string&);

  virtual ::param_type
  post_param_type () = 0;

  // Parser construction API.
  //
  void
  parsers (::param_class_type_pskel& /* type */,
           ::xml_schema::string_pskel& /* value */);

  // Individual attribute parsers.
  //
  void
  type_parser (::param_class_type_pskel&);

  void
  value_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  param_type_pskel ();

  // Implementation details.
  //
  protected:
  param_type_pskel* param_type_impl_;
  param_type_pskel (param_type_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::param_class_type_pskel* type_parser_;
  ::xml_schema::string_pskel* value_parser_;
};

class inject_one_type_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  injection (const ::std::string&);

  virtual void
  slot (const ::std::string&);

  virtual ::inject_one_type
  post_inject_one_type () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* injection */,
           ::xml_schema::token_pskel& /* slot */);

  // Individual attribute parsers.
  //
  void
  injection_parser (::xml_schema::token_pskel&);

  void
  slot_parser (::xml_schema::token_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_one_type_pskel ();

  // Implementation details.
  //
  protected:
  inject_one_type_pskel* inject_one_type_impl_;
  inject_one_type_pskel (inject_one_type_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* injection_parser_;
  ::xml_schema::token_pskel* slot_parser_;

  protected:
  struct v_state_attr_
  {
    bool injection;
    bool slot;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class inject_all_type_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  receiver (const ::std::string&);

  virtual void
  slot (const ::std::string&);

  virtual ::inject_all_type
  post_inject_all_type () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* receiver */,
           ::xml_schema::token_pskel& /* slot */);

  // Individual attribute parsers.
  //
  void
  receiver_parser (::xml_schema::token_pskel&);

  void
  slot_parser (::xml_schema::token_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_all_type_pskel ();

  // Implementation details.
  //
  protected:
  inject_all_type_pskel* inject_all_type_impl_;
  inject_all_type_pskel (inject_all_type_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* receiver_parser_;
  ::xml_schema::token_pskel* slot_parser_;

  protected:
  struct v_state_attr_
  {
    bool receiver;
    bool slot;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class component_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  class_ (const ::std::string&);

  // Elements.
  //
  virtual void
  attribute (::attribute_type*);

  virtual ::component*
  post_component () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* name */,
           ::xml_schema::token_pskel& /* class */,
           ::attribute_type_pskel& /* attribute */);

  // Individual attribute parsers.
  //
  void
  name_parser (::xml_schema::token_pskel&);

  void
  class__parser (::xml_schema::token_pskel&);

  // Individual element parsers.
  //
  void
  attribute_parser (::attribute_type_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  component_pskel ();

  // Implementation details.
  //
  protected:
  component_pskel* component_impl_;
  component_pskel (component_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* name_parser_;
  ::xml_schema::token_pskel* class__parser_;
  ::attribute_type_pskel* attribute_parser_;

  public:
  struct v_state_descr_
  {
    void (::component_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool name;
    bool class_;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class inject_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  receiver (const ::std::string&);

  virtual void
  injection (const ::std::string&);

  virtual void
  slot (const ::std::string&);

  virtual ::inject
  post_inject () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* receiver */,
           ::xml_schema::token_pskel& /* injection */,
           ::xml_schema::token_pskel& /* slot */);

  // Individual attribute parsers.
  //
  void
  receiver_parser (::xml_schema::token_pskel&);

  void
  injection_parser (::xml_schema::token_pskel&);

  void
  slot_parser (::xml_schema::token_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_pskel ();

  // Implementation details.
  //
  protected:
  inject_pskel* inject_impl_;
  inject_pskel (inject_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* receiver_parser_;
  ::xml_schema::token_pskel* injection_parser_;
  ::xml_schema::token_pskel* slot_parser_;

  protected:
  struct v_state_attr_
  {
    bool receiver;
    bool injection;
    bool slot;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class inject_one_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  receiver (const ::std::string&);

  // Elements.
  //
  virtual void
  inject (const ::inject_one_type&);

  virtual ::inject_one*
  post_inject_one () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* receiver */,
           ::inject_one_type_pskel& /* inject */);

  // Individual attribute parsers.
  //
  void
  receiver_parser (::xml_schema::token_pskel&);

  // Individual element parsers.
  //
  void
  inject_parser (::inject_one_type_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_one_pskel ();

  // Implementation details.
  //
  protected:
  inject_one_pskel* inject_one_impl_;
  inject_one_pskel (inject_one_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* receiver_parser_;
  ::inject_one_type_pskel* inject_parser_;

  public:
  struct v_state_descr_
  {
    void (::inject_one_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool receiver;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class inject_all_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  injection (const ::std::string&);

  // Elements.
  //
  virtual void
  inject (const ::inject_all_type&);

  virtual ::inject_all*
  post_inject_all () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* injection */,
           ::inject_all_type_pskel& /* inject */);

  // Individual attribute parsers.
  //
  void
  injection_parser (::xml_schema::token_pskel&);

  // Individual element parsers.
  //
  void
  inject_parser (::inject_all_type_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_all_pskel ();

  // Implementation details.
  //
  protected:
  inject_all_pskel* inject_all_impl_;
  inject_all_pskel (inject_all_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* injection_parser_;
  ::inject_all_type_pskel* inject_parser_;

  public:
  struct v_state_descr_
  {
    void (::inject_all_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool injection;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class inject_slot_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  slot (const ::std::string&);

  virtual void
  injection (const ::std::string&);

  virtual ::inject_slot
  post_inject_slot () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::token_pskel& /* slot */,
           ::xml_schema::token_pskel& /* injection */);

  // Individual attribute parsers.
  //
  void
  slot_parser (::xml_schema::token_pskel&);

  void
  injection_parser (::xml_schema::token_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_slot_pskel ();

  // Implementation details.
  //
  protected:
  inject_slot_pskel* inject_slot_impl_;
  inject_slot_pskel (inject_slot_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::token_pskel* slot_parser_;
  ::xml_schema::token_pskel* injection_parser_;

  protected:
  struct v_state_attr_
  {
    bool slot;
    bool injection;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class DI_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  plugins (::plugins*);

  virtual void
  components (::components*);

  virtual void
  wiring (::wiring*);

  virtual ::DI*
  post_DI () = 0;

  // Parser construction API.
  //
  void
  parsers (::plugins_pskel& /* plugins */,
           ::components_pskel& /* components */,
           ::wiring_pskel& /* wiring */);

  // Individual element parsers.
  //
  void
  plugins_parser (::plugins_pskel&);

  void
  components_parser (::components_pskel&);

  void
  wiring_parser (::wiring_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DI_pskel ();

  // Implementation details.
  //
  protected:
  DI_pskel* DI_impl_;
  DI_pskel (DI_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::plugins_pskel* plugins_parser_;
  ::components_pskel* components_parser_;
  ::wiring_pskel* wiring_parser_;

  public:
  struct v_state_descr_
  {
    void (::DI_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class shared_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  lib (const ::std::string&);

  virtual ::shared
  post_shared () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::name_pskel& /* lib */);

  // Individual attribute parsers.
  //
  void
  lib_parser (::xml_schema::name_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  shared_pskel ();

  // Implementation details.
  //
  protected:
  shared_pskel* shared_impl_;
  shared_pskel (shared_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::name_pskel* lib_parser_;

  protected:
  struct v_state_attr_
  {
    bool lib;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class plugins_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  shared (const ::shared&);

  virtual ::plugins*
  post_plugins () = 0;

  // Parser construction API.
  //
  void
  parsers (::shared_pskel& /* shared */);

  // Individual element parsers.
  //
  void
  shared_parser (::shared_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  plugins_pskel ();

  // Implementation details.
  //
  protected:
  plugins_pskel* plugins_impl_;
  plugins_pskel (plugins_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::shared_pskel* shared_parser_;

  public:
  struct v_state_descr_
  {
    void (::plugins_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class components_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  component (::component*);

  virtual ::components*
  post_components () = 0;

  // Parser construction API.
  //
  void
  parsers (::component_pskel& /* component */);

  // Individual element parsers.
  //
  void
  component_parser (::component_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  components_pskel ();

  // Implementation details.
  //
  protected:
  components_pskel* components_impl_;
  components_pskel (components_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::component_pskel* component_parser_;

  public:
  struct v_state_descr_
  {
    void (::components_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class wiring_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  inject (const ::inject&);

  virtual void
  inject_all (::inject_all*);

  virtual void
  inject_one (::inject_one*);

  virtual void
  inject_slot (const ::inject_slot&);

  virtual ::wiring*
  post_wiring () = 0;

  // Parser construction API.
  //
  void
  parsers (::inject_pskel& /* inject */,
           ::inject_all_pskel& /* inject-all */,
           ::inject_one_pskel& /* inject-one */,
           ::inject_slot_pskel& /* inject-slot */);

  // Individual element parsers.
  //
  void
  inject_parser (::inject_pskel&);

  void
  inject_all_parser (::inject_all_pskel&);

  void
  inject_one_parser (::inject_one_pskel&);

  void
  inject_slot_parser (::inject_slot_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  wiring_pskel ();

  // Implementation details.
  //
  protected:
  wiring_pskel* wiring_impl_;
  wiring_pskel (wiring_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::inject_pskel* inject_parser_;
  ::inject_all_pskel* inject_all_parser_;
  ::inject_one_pskel* inject_one_parser_;
  ::inject_slot_pskel* inject_slot_parser_;

  public:
  struct v_state_descr_
  {
    void (::wiring_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_DI_DI_PSKEL_HXX
