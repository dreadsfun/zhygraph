// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_DI_DI_SIMPL_HXX
#define E__VS14PRJBKP_ENGINE_DI_DI_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define E__VS14PRJBKP_ENGINE_DI_DI_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "di-sskel.hxx"

#include <xsde/cxx/stack.hxx>

class param_class_type_simpl: public param_class_type_sskel
{
  public:
  param_class_type_simpl ();

  virtual void
  pre (const ::param_class_type&);

  virtual void
  _serialize_content ();

  public:
  const ::param_class_type* param_class_type_simpl_state_;
};

class insert_simpl: public insert_sskel
{
  public:
  virtual void
  pre (const ::insert&);

  // Attributes.
  //
  virtual ::std::string
  value ();

  public:
  struct insert_simpl_state
  {
    const ::insert* insert_;
  };

  insert_simpl_state insert_simpl_state_;
};

class attribute_type_simpl: public attribute_type_sskel
{
  public:
  virtual void
  pre (const ::attribute_type&);

  // Attributes.
  //
  virtual ::std::string
  name ();

  virtual bool
  value_present ();

  virtual ::std::string
  value ();

  // Elements.
  //
  virtual bool
  insert_next ();

  virtual const ::insert&
  insert ();

  public:
  struct attribute_type_simpl_state
  {
    const ::attribute_type* attribute_type_;
    ::attribute_type::insert_const_iterator insert_;
    ::attribute_type::insert_const_iterator insert_end_;
  };

  attribute_type_simpl_state attribute_type_simpl_state_;
};

class param_type_simpl: public param_type_sskel
{
  public:
  virtual void
  pre (const ::param_type&);

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual const ::param_class_type&
  type ();

  virtual bool
  value_present ();

  virtual ::std::string
  value ();

  public:
  struct param_type_simpl_state
  {
    const ::param_type* param_type_;
  };

  param_type_simpl_state param_type_simpl_state_;
};

class inject_one_type_simpl: public inject_one_type_sskel
{
  public:
  virtual void
  pre (const ::inject_one_type&);

  // Attributes.
  //
  virtual ::std::string
  injection ();

  virtual ::std::string
  slot ();

  public:
  struct inject_one_type_simpl_state
  {
    const ::inject_one_type* inject_one_type_;
  };

  inject_one_type_simpl_state inject_one_type_simpl_state_;
};

class inject_all_type_simpl: public inject_all_type_sskel
{
  public:
  virtual void
  pre (const ::inject_all_type&);

  // Attributes.
  //
  virtual ::std::string
  receiver ();

  virtual ::std::string
  slot ();

  public:
  struct inject_all_type_simpl_state
  {
    const ::inject_all_type* inject_all_type_;
  };

  inject_all_type_simpl_state inject_all_type_simpl_state_;
};

class component_simpl: public component_sskel
{
  public:
  virtual void
  pre (const ::component&);

  // Attributes.
  //
  virtual ::std::string
  name ();

  virtual ::std::string
  class_ ();

  // Elements.
  //
  virtual bool
  attribute_next ();

  virtual const ::attribute_type&
  attribute ();

  public:
  struct component_simpl_state
  {
    const ::component* component_;
    ::component::attribute_const_iterator attribute_;
    ::component::attribute_const_iterator attribute_end_;
  };

  component_simpl_state component_simpl_state_;
};

class inject_simpl: public inject_sskel
{
  public:
  virtual void
  pre (const ::inject&);

  // Attributes.
  //
  virtual ::std::string
  receiver ();

  virtual ::std::string
  injection ();

  virtual ::std::string
  slot ();

  public:
  struct inject_simpl_state
  {
    const ::inject* inject_;
  };

  inject_simpl_state inject_simpl_state_;
};

class inject_one_simpl: public inject_one_sskel
{
  public:
  virtual void
  pre (const ::inject_one&);

  // Attributes.
  //
  virtual ::std::string
  receiver ();

  // Elements.
  //
  virtual bool
  inject_next ();

  virtual const ::inject_one_type&
  inject ();

  public:
  struct inject_one_simpl_state
  {
    const ::inject_one* inject_one_;
    ::inject_one::inject_const_iterator inject_;
    ::inject_one::inject_const_iterator inject_end_;
  };

  inject_one_simpl_state inject_one_simpl_state_;
};

class inject_all_simpl: public inject_all_sskel
{
  public:
  virtual void
  pre (const ::inject_all&);

  // Attributes.
  //
  virtual ::std::string
  injection ();

  // Elements.
  //
  virtual bool
  inject_next ();

  virtual const ::inject_all_type&
  inject ();

  public:
  struct inject_all_simpl_state
  {
    const ::inject_all* inject_all_;
    ::inject_all::inject_const_iterator inject_;
    ::inject_all::inject_const_iterator inject_end_;
  };

  inject_all_simpl_state inject_all_simpl_state_;
};

class inject_slot_simpl: public inject_slot_sskel
{
  public:
  virtual void
  pre (const ::inject_slot&);

  // Attributes.
  //
  virtual ::std::string
  slot ();

  virtual ::std::string
  injection ();

  public:
  struct inject_slot_simpl_state
  {
    const ::inject_slot* inject_slot_;
  };

  inject_slot_simpl_state inject_slot_simpl_state_;
};

class DI_simpl: public DI_sskel
{
  public:
  virtual void
  pre (const ::DI&);

  // Elements.
  //
  virtual bool
  plugins_present ();

  virtual const ::plugins&
  plugins ();

  virtual bool
  components_present ();

  virtual const ::components&
  components ();

  virtual bool
  wiring_present ();

  virtual const ::wiring&
  wiring ();

  public:
  struct DI_simpl_state
  {
    const ::DI* DI_;
  };

  DI_simpl_state DI_simpl_state_;
};

class shared_simpl: public shared_sskel
{
  public:
  virtual void
  pre (const ::shared&);

  // Attributes.
  //
  virtual ::std::string
  lib ();

  public:
  struct shared_simpl_state
  {
    const ::shared* shared_;
  };

  shared_simpl_state shared_simpl_state_;
};

class plugins_simpl: public plugins_sskel
{
  public:
  virtual void
  pre (const ::plugins&);

  // Elements.
  //
  virtual bool
  shared_next ();

  virtual const ::shared&
  shared ();

  public:
  struct plugins_simpl_state
  {
    const ::plugins* plugins_;
    ::plugins::shared_const_iterator shared_;
    ::plugins::shared_const_iterator shared_end_;
  };

  plugins_simpl_state plugins_simpl_state_;
};

class components_simpl: public components_sskel
{
  public:
  virtual void
  pre (const ::components&);

  // Elements.
  //
  virtual bool
  component_next ();

  virtual const ::component&
  component ();

  public:
  struct components_simpl_state
  {
    const ::components* components_;
    ::components::component_const_iterator component_;
    ::components::component_const_iterator component_end_;
  };

  components_simpl_state components_simpl_state_;
};

class wiring_simpl: public wiring_sskel
{
  public:
  virtual void
  pre (const ::wiring&);

  // Elements.
  //
  virtual bool
  inject_next ();

  virtual const ::inject&
  inject ();

  virtual bool
  inject_all_next ();

  virtual const ::inject_all&
  inject_all ();

  virtual bool
  inject_one_next ();

  virtual const ::inject_one&
  inject_one ();

  virtual bool
  inject_slot_next ();

  virtual const ::inject_slot&
  inject_slot ();

  public:
  struct wiring_simpl_state
  {
    const ::wiring* wiring_;
    ::wiring::inject_const_iterator inject_;
    ::wiring::inject_const_iterator inject_end_;
    ::wiring::inject_all_const_iterator inject_all_;
    ::wiring::inject_all_const_iterator inject_all_end_;
    ::wiring::inject_one_const_iterator inject_one_;
    ::wiring::inject_one_const_iterator inject_one_end_;
    ::wiring::inject_slot_const_iterator inject_slot_;
    ::wiring::inject_slot_const_iterator inject_slot_end_;
  };

  wiring_simpl_state wiring_simpl_state_;
};

#ifdef E__VS14PRJBKP_ENGINE_DI_DI_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

// Serializer aggregate for the DI element.
//
class DI_saggr
{
  public:
  DI_saggr ();

  void
  pre (const ::DI& x)
  {
    this->DI_s_.pre (x);
  }

  void
  post ()
  {
    this->DI_s_.post ();
  }

  ::DI_simpl&
  root_serializer ()
  {
    return this->DI_s_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->DI_s_._reset ();
  }

  public:
  ::component_simpl component_s_;
  ::inject_simpl inject_s_;
  ::inject_one_type_simpl inject_one_type_s_;
  ::inject_one_simpl inject_one_s_;
  ::inject_all_type_simpl inject_all_type_s_;
  ::inject_all_simpl inject_all_s_;
  ::inject_slot_simpl inject_slot_s_;
  ::DI_simpl DI_s_;
  ::plugins_simpl plugins_s_;
  ::shared_simpl shared_s_;
  ::components_simpl components_s_;
  ::xml_schema::name_simpl name_s_;
  ::xml_schema::token_simpl token_s_;
  ::xml_schema::string_simpl string_s_;
  ::wiring_simpl wiring_s_;
  ::attribute_type_simpl attribute_type_s_;
  ::insert_simpl insert_s_;
};

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_DI_DI_SIMPL_HXX
