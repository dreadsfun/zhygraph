// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_DI_DI_SSKEL_HXX
#define E__VS14PRJBKP_ENGINE_DI_DI_SSKEL_HXX

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
class param_class_type_sskel;
class insert_sskel;
class attribute_type_sskel;
class param_type_sskel;
class inject_one_type_sskel;
class inject_all_type_sskel;
class component_sskel;
class inject_sskel;
class inject_one_sskel;
class inject_all_sskel;
class inject_slot_sskel;
class DI_sskel;
class shared_sskel;
class plugins_sskel;
class components_sskel;
class wiring_sskel;

#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "di.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

class param_class_type_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::param_class_type&) = 0;

  // virtual void
  // post ();

  // Constructor.
  //
  param_class_type_sskel (::xml_schema::string_sskel* tiein);

  // Implementation details.
  //
  virtual void
  pre (const ::std::string&);

  protected:
  param_class_type_sskel* param_class_type_impl_;
  param_class_type_sskel (param_class_type_sskel*, void*);

  protected:
  static const char* const _xsde_param_class_type_sskel_enums_[8UL];
};

class insert_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::insert&) = 0;

  // Attributes.
  //
  virtual ::std::string
  value () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* value */);

  // Individual attribute serializers.
  //
  void
  value_serializer (::xml_schema::string_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  insert_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  insert_sskel* insert_impl_;
  insert_sskel (insert_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* value_serializer_;
};

class attribute_type_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::attribute_type&) = 0;

  // Attributes.
  //
  virtual ::std::string
  name () = 0;

  virtual bool
  value_present ();

  virtual ::std::string
  value () = 0;

  // Elements.
  //
  virtual bool
  insert_next ();

  virtual const ::insert&
  insert () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* name */,
               ::xml_schema::string_sskel& /* value */,
               ::insert_sskel& /* insert */);

  // Individual attribute serializers.
  //
  void
  name_serializer (::xml_schema::token_sskel&);

  void
  value_serializer (::xml_schema::string_sskel&);

  // Individual element serializers.
  //
  void
  insert_serializer (::insert_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  attribute_type_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  attribute_type_sskel* attribute_type_impl_;
  attribute_type_sskel (attribute_type_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* name_serializer_;
  ::xml_schema::string_sskel* value_serializer_;
  ::insert_sskel* insert_serializer_;
};

class param_type_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::param_type&) = 0;

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual const ::param_class_type&
  type () = 0;

  virtual bool
  value_present ();

  virtual ::std::string
  value () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::param_class_type_sskel& /* type */,
               ::xml_schema::string_sskel& /* value */);

  // Individual attribute serializers.
  //
  void
  type_serializer (::param_class_type_sskel&);

  void
  value_serializer (::xml_schema::string_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  param_type_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  param_type_sskel* param_type_impl_;
  param_type_sskel (param_type_sskel*, void*);

  protected:
  ::param_class_type_sskel* type_serializer_;
  ::xml_schema::string_sskel* value_serializer_;
};

class inject_one_type_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::inject_one_type&) = 0;

  // Attributes.
  //
  virtual ::std::string
  injection () = 0;

  virtual ::std::string
  slot () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* injection */,
               ::xml_schema::token_sskel& /* slot */);

  // Individual attribute serializers.
  //
  void
  injection_serializer (::xml_schema::token_sskel&);

  void
  slot_serializer (::xml_schema::token_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_one_type_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  inject_one_type_sskel* inject_one_type_impl_;
  inject_one_type_sskel (inject_one_type_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* injection_serializer_;
  ::xml_schema::token_sskel* slot_serializer_;
};

class inject_all_type_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::inject_all_type&) = 0;

  // Attributes.
  //
  virtual ::std::string
  receiver () = 0;

  virtual ::std::string
  slot () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* receiver */,
               ::xml_schema::token_sskel& /* slot */);

  // Individual attribute serializers.
  //
  void
  receiver_serializer (::xml_schema::token_sskel&);

  void
  slot_serializer (::xml_schema::token_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_all_type_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  inject_all_type_sskel* inject_all_type_impl_;
  inject_all_type_sskel (inject_all_type_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* receiver_serializer_;
  ::xml_schema::token_sskel* slot_serializer_;
};

class component_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::component&) = 0;

  // Attributes.
  //
  virtual ::std::string
  name () = 0;

  virtual ::std::string
  class_ () = 0;

  // Elements.
  //
  virtual bool
  attribute_next ();

  virtual const ::attribute_type&
  attribute () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* name */,
               ::xml_schema::token_sskel& /* class */,
               ::attribute_type_sskel& /* attribute */);

  // Individual attribute serializers.
  //
  void
  name_serializer (::xml_schema::token_sskel&);

  void
  class__serializer (::xml_schema::token_sskel&);

  // Individual element serializers.
  //
  void
  attribute_serializer (::attribute_type_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  component_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  component_sskel* component_impl_;
  component_sskel (component_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* name_serializer_;
  ::xml_schema::token_sskel* class__serializer_;
  ::attribute_type_sskel* attribute_serializer_;
};

class inject_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::inject&) = 0;

  // Attributes.
  //
  virtual ::std::string
  receiver () = 0;

  virtual ::std::string
  injection () = 0;

  virtual ::std::string
  slot () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* receiver */,
               ::xml_schema::token_sskel& /* injection */,
               ::xml_schema::token_sskel& /* slot */);

  // Individual attribute serializers.
  //
  void
  receiver_serializer (::xml_schema::token_sskel&);

  void
  injection_serializer (::xml_schema::token_sskel&);

  void
  slot_serializer (::xml_schema::token_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  inject_sskel* inject_impl_;
  inject_sskel (inject_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* receiver_serializer_;
  ::xml_schema::token_sskel* injection_serializer_;
  ::xml_schema::token_sskel* slot_serializer_;
};

class inject_one_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::inject_one&) = 0;

  // Attributes.
  //
  virtual ::std::string
  receiver () = 0;

  // Elements.
  //
  virtual bool
  inject_next () = 0;

  virtual const ::inject_one_type&
  inject () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* receiver */,
               ::inject_one_type_sskel& /* inject */);

  // Individual attribute serializers.
  //
  void
  receiver_serializer (::xml_schema::token_sskel&);

  // Individual element serializers.
  //
  void
  inject_serializer (::inject_one_type_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_one_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  inject_one_sskel* inject_one_impl_;
  inject_one_sskel (inject_one_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* receiver_serializer_;
  ::inject_one_type_sskel* inject_serializer_;
};

class inject_all_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::inject_all&) = 0;

  // Attributes.
  //
  virtual ::std::string
  injection () = 0;

  // Elements.
  //
  virtual bool
  inject_next () = 0;

  virtual const ::inject_all_type&
  inject () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* injection */,
               ::inject_all_type_sskel& /* inject */);

  // Individual attribute serializers.
  //
  void
  injection_serializer (::xml_schema::token_sskel&);

  // Individual element serializers.
  //
  void
  inject_serializer (::inject_all_type_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_all_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  inject_all_sskel* inject_all_impl_;
  inject_all_sskel (inject_all_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* injection_serializer_;
  ::inject_all_type_sskel* inject_serializer_;
};

class inject_slot_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::inject_slot&) = 0;

  // Attributes.
  //
  virtual ::std::string
  slot () = 0;

  virtual ::std::string
  injection () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::token_sskel& /* slot */,
               ::xml_schema::token_sskel& /* injection */);

  // Individual attribute serializers.
  //
  void
  slot_serializer (::xml_schema::token_sskel&);

  void
  injection_serializer (::xml_schema::token_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  inject_slot_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  inject_slot_sskel* inject_slot_impl_;
  inject_slot_sskel (inject_slot_sskel*, void*);

  protected:
  ::xml_schema::token_sskel* slot_serializer_;
  ::xml_schema::token_sskel* injection_serializer_;
};

class DI_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::DI&) = 0;

  // Elements.
  //
  virtual bool
  plugins_present ();

  virtual const ::plugins&
  plugins () = 0;

  virtual bool
  components_present ();

  virtual const ::components&
  components () = 0;

  virtual bool
  wiring_present ();

  virtual const ::wiring&
  wiring () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::plugins_sskel& /* plugins */,
               ::components_sskel& /* components */,
               ::wiring_sskel& /* wiring */);

  // Individual element serializers.
  //
  void
  plugins_serializer (::plugins_sskel&);

  void
  components_serializer (::components_sskel&);

  void
  wiring_serializer (::wiring_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DI_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  DI_sskel* DI_impl_;
  DI_sskel (DI_sskel*, void*);

  protected:
  ::plugins_sskel* plugins_serializer_;
  ::components_sskel* components_serializer_;
  ::wiring_sskel* wiring_serializer_;
};

class shared_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::shared&) = 0;

  // Attributes.
  //
  virtual ::std::string
  lib () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::name_sskel& /* lib */);

  // Individual attribute serializers.
  //
  void
  lib_serializer (::xml_schema::name_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  shared_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  protected:
  shared_sskel* shared_impl_;
  shared_sskel (shared_sskel*, void*);

  protected:
  ::xml_schema::name_sskel* lib_serializer_;
};

class plugins_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::plugins&) = 0;

  // Elements.
  //
  virtual bool
  shared_next ();

  virtual const ::shared&
  shared () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::shared_sskel& /* shared */);

  // Individual element serializers.
  //
  void
  shared_serializer (::shared_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  plugins_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  plugins_sskel* plugins_impl_;
  plugins_sskel (plugins_sskel*, void*);

  protected:
  ::shared_sskel* shared_serializer_;
};

class components_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::components&) = 0;

  // Elements.
  //
  virtual bool
  component_next () = 0;

  virtual const ::component&
  component () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::component_sskel& /* component */);

  // Individual element serializers.
  //
  void
  component_serializer (::component_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  components_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  components_sskel* components_impl_;
  components_sskel (components_sskel*, void*);

  protected:
  ::component_sskel* component_serializer_;
};

class wiring_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::wiring&) = 0;

  // Elements.
  //
  virtual bool
  inject_next ();

  virtual const ::inject&
  inject () = 0;

  virtual bool
  inject_all_next ();

  virtual const ::inject_all&
  inject_all () = 0;

  virtual bool
  inject_one_next ();

  virtual const ::inject_one&
  inject_one () = 0;

  virtual bool
  inject_slot_next ();

  virtual const ::inject_slot&
  inject_slot () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::inject_sskel& /* inject */,
               ::inject_all_sskel& /* inject-all */,
               ::inject_one_sskel& /* inject-one */,
               ::inject_slot_sskel& /* inject-slot */);

  // Individual element serializers.
  //
  void
  inject_serializer (::inject_sskel&);

  void
  inject_all_serializer (::inject_all_sskel&);

  void
  inject_one_serializer (::inject_one_sskel&);

  void
  inject_slot_serializer (::inject_slot_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  wiring_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  wiring_sskel* wiring_impl_;
  wiring_sskel (wiring_sskel*, void*);

  protected:
  ::inject_sskel* inject_serializer_;
  ::inject_all_sskel* inject_all_serializer_;
  ::inject_one_sskel* inject_one_serializer_;
  ::inject_slot_sskel* inject_slot_serializer_;
};

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_DI_DI_SSKEL_HXX
