// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "material.hxx"

// materials
//

const materials::material_sequence& materials::
material () const
{
  return this->material_;
}

materials::material_sequence& materials::
material ()
{
  return this->material_;
}

// vector
//

const ::std::string& vector::
uniform () const
{
  return this->uniform_;
}

::std::string& vector::
uniform ()
{
  return this->uniform_;
}

void vector::
uniform (const ::std::string& x)
{
  this->uniform_ = x;
}

float vector::
x () const
{
  return this->x_;
}

float& vector::
x ()
{
  return this->x_;
}

void vector::
x (float x)
{
  this->x_ = x;
}

bool vector::
y_present () const
{
  return this->y_present_;
}

void vector::
y_present (bool x)
{
  this->y_present_ = x;
}

float vector::
y () const
{
  return this->y_;
}

float& vector::
y ()
{
  return this->y_;
}

void vector::
y (float x)
{
  this->y_ = x;
  this->y_present_ = true;
}

bool vector::
z_present () const
{
  return this->z_present_;
}

void vector::
z_present (bool x)
{
  this->z_present_ = x;
}

float vector::
z () const
{
  return this->z_;
}

float& vector::
z ()
{
  return this->z_;
}

void vector::
z (float x)
{
  this->z_ = x;
  this->z_present_ = true;
}

bool vector::
w_present () const
{
  return this->w_present_;
}

void vector::
w_present (bool x)
{
  this->w_present_ = x;
}

float vector::
w () const
{
  return this->w_;
}

float& vector::
w ()
{
  return this->w_;
}

void vector::
w (float x)
{
  this->w_ = x;
  this->w_present_ = true;
}

// shader
//

const ::std::string& shader::
file () const
{
  return this->file_;
}

::std::string& shader::
file ()
{
  return this->file_;
}

void shader::
file (const ::std::string& x)
{
  this->file_ = x;
}

// texture
//

const ::std::string& texture::
sampler () const
{
  return this->sampler_;
}

::std::string& texture::
sampler ()
{
  return this->sampler_;
}

void texture::
sampler (const ::std::string& x)
{
  this->sampler_ = x;
}

const ::std::string& texture::
file () const
{
  return this->file_;
}

::std::string& texture::
file ()
{
  return this->file_;
}

void texture::
file (const ::std::string& x)
{
  this->file_ = x;
}

// material
//

const ::std::string& material::
name () const
{
  return this->name_;
}

::std::string& material::
name ()
{
  return this->name_;
}

void material::
name (const ::std::string& x)
{
  this->name_ = x;
}

const ::shader& material::
shader () const
{
  return this->shader_;
}

::shader& material::
shader ()
{
  return this->shader_;
}

void material::
shader (const ::shader& x)
{
  this->shader_ = x;
}

const material::texture_sequence& material::
texture () const
{
  return this->texture_;
}

material::texture_sequence& material::
texture ()
{
  return this->texture_;
}

const material::vector_sequence& material::
vector () const
{
  return this->vector_;
}

material::vector_sequence& material::
vector ()
{
  return this->vector_;
}

#include <stdlib.h>
#include <new>

// materials
//

materials::
materials ()
{
}

materials::
~materials ()
{
}

// vector
//

vector::
vector ()
{
  this->y_present_ = false;
  this->z_present_ = false;
  this->w_present_ = false;
}

vector::
~vector ()
{
}

vector::
vector (const vector& x)
{
  XSDE_UNUSED (x);
  this->uniform_ = x.uniform_;
  this->x_ = x.x_;
  this->y_present_ = x.y_present_;
  if (this->y_present_)
    this->y_ = x.y_;
  this->z_present_ = x.z_present_;
  if (this->z_present_)
    this->z_ = x.z_;
  this->w_present_ = x.w_present_;
  if (this->w_present_)
    this->w_ = x.w_;
}

vector& vector::
operator= (const vector& x)
{
  XSDE_UNUSED (x);
  this->uniform_ = x.uniform_;
  this->x_ = x.x_;
  this->y_present_ = x.y_present_;
  if (this->y_present_)
    this->y_ = x.y_;
  this->z_present_ = x.z_present_;
  if (this->z_present_)
    this->z_ = x.z_;
  this->w_present_ = x.w_present_;
  if (this->w_present_)
    this->w_ = x.w_;
  return *this;
}

// shader
//

shader::
shader ()
{
}

shader::
~shader ()
{
}

shader::
shader (const shader& x)
{
  XSDE_UNUSED (x);
  this->file_ = x.file_;
}

shader& shader::
operator= (const shader& x)
{
  XSDE_UNUSED (x);
  this->file_ = x.file_;
  return *this;
}

// texture
//

texture::
texture ()
{
}

texture::
~texture ()
{
}

texture::
texture (const texture& x)
{
  XSDE_UNUSED (x);
  this->sampler_ = x.sampler_;
  this->file_ = x.file_;
}

texture& texture::
operator= (const texture& x)
{
  XSDE_UNUSED (x);
  this->sampler_ = x.sampler_;
  this->file_ = x.file_;
  return *this;
}

// material
//

material::
material ()
{
}

material::
~material ()
{
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

