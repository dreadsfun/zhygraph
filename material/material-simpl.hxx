// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_SIMPL_HXX
#define E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "material-sskel.hxx"

#include <xsde/cxx/stack.hxx>

class materials_simpl: public materials_sskel
{
  public:
  virtual void
  pre (const ::materials&);

  // Elements.
  //
  virtual bool
  material_next ();

  virtual const ::material&
  material ();

  public:
  struct materials_simpl_state
  {
    const ::materials* materials_;
    ::materials::material_const_iterator material_;
    ::materials::material_const_iterator material_end_;
  };

  materials_simpl_state materials_simpl_state_;
};

class vector_simpl: public vector_sskel
{
  public:
  virtual void
  pre (const ::vector&);

  // Attributes.
  //
  virtual ::std::string
  uniform ();

  virtual float
  x ();

  virtual bool
  y_present ();

  virtual float
  y ();

  virtual bool
  z_present ();

  virtual float
  z ();

  virtual bool
  w_present ();

  virtual float
  w ();

  public:
  struct vector_simpl_state
  {
    const ::vector* vector_;
  };

  vector_simpl_state vector_simpl_state_;
};

class shader_simpl: public shader_sskel
{
  public:
  virtual void
  pre (const ::shader&);

  // Attributes.
  //
  virtual ::std::string
  file ();

  public:
  struct shader_simpl_state
  {
    const ::shader* shader_;
  };

  shader_simpl_state shader_simpl_state_;
};

class texture_simpl: public texture_sskel
{
  public:
  virtual void
  pre (const ::texture&);

  // Attributes.
  //
  virtual ::std::string
  sampler ();

  virtual ::std::string
  file ();

  public:
  struct texture_simpl_state
  {
    const ::texture* texture_;
  };

  texture_simpl_state texture_simpl_state_;
};

class material_simpl: public material_sskel
{
  public:
  virtual void
  pre (const ::material&);

  // Attributes.
  //
  virtual ::std::string
  name ();

  // Elements.
  //
  virtual const ::shader&
  shader ();

  virtual bool
  texture_next ();

  virtual const ::texture&
  texture ();

  virtual bool
  vector_next ();

  virtual const ::vector&
  vector ();

  public:
  struct material_simpl_state
  {
    const ::material* material_;
    ::material::texture_const_iterator texture_;
    ::material::texture_const_iterator texture_end_;
    ::material::vector_const_iterator vector_;
    ::material::vector_const_iterator vector_end_;
  };

  material_simpl_state material_simpl_state_;
};

#ifdef E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

// Serializer aggregate for the materials element.
//
class materials_saggr
{
  public:
  materials_saggr ();

  void
  pre (const ::materials& x)
  {
    this->materials_s_.pre (x);
  }

  void
  post ()
  {
    this->materials_s_.post ();
  }

  ::materials_simpl&
  root_serializer ()
  {
    return this->materials_s_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->materials_s_._reset ();
  }

  public:
  ::xml_schema::float_simpl float_s_;
  ::xml_schema::string_simpl string_s_;
  ::vector_simpl vector_s_;
  ::materials_simpl materials_s_;
  ::material_simpl material_s_;
  ::shader_simpl shader_s_;
  ::texture_simpl texture_s_;
};

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_SIMPL_HXX
