// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "material-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

// materials_pimpl
//

materials_pimpl::
materials_pimpl (bool b)
{
  this->materials_pimpl_base_ = b;
  this->materials_pimpl_state_.materials_ = 0;
}

materials_pimpl::
~materials_pimpl ()
{
  if (!this->materials_pimpl_base_ && this->materials_pimpl_state_.materials_)
    delete this->materials_pimpl_state_.materials_;
}

void materials_pimpl::
_reset ()
{
  materials_pskel::_reset ();

  if (!this->materials_pimpl_base_ && this->materials_pimpl_state_.materials_)
  {
    delete this->materials_pimpl_state_.materials_;
    this->materials_pimpl_state_.materials_ = 0;
  }
}

void materials_pimpl::
pre_impl (::materials* x)
{
  this->materials_pimpl_state_.materials_ = x;
}

void materials_pimpl::
pre ()
{
  ::materials* x = new ::materials;
  this->pre_impl (x);
}

void materials_pimpl::
material (::material* x)
{
  this->materials_pimpl_state_.materials_->material ().push_back (x);
}

::materials* materials_pimpl::
post_materials ()
{
  ::materials* r = this->materials_pimpl_state_.materials_;
  this->materials_pimpl_state_.materials_ = 0;
  return r;
}

// vector_pimpl
//

void vector_pimpl::
pre ()
{
  this->vector_pimpl_state_.vector_ = ::vector ();
}

void vector_pimpl::
uniform (const ::std::string& x)
{
  this->vector_pimpl_state_.vector_.uniform (x);
}

void vector_pimpl::
x (float x)
{
  this->vector_pimpl_state_.vector_.x (x);
}

void vector_pimpl::
y (float x)
{
  this->vector_pimpl_state_.vector_.y (x);
}

void vector_pimpl::
z (float x)
{
  this->vector_pimpl_state_.vector_.z (x);
}

void vector_pimpl::
w (float x)
{
  this->vector_pimpl_state_.vector_.w (x);
}

::vector vector_pimpl::
post_vector ()
{
  return this->vector_pimpl_state_.vector_;
}

// shader_pimpl
//

void shader_pimpl::
pre ()
{
  this->shader_pimpl_state_.shader_ = ::shader ();
}

void shader_pimpl::
file (const ::std::string& x)
{
  this->shader_pimpl_state_.shader_.file (x);
}

::shader shader_pimpl::
post_shader ()
{
  return this->shader_pimpl_state_.shader_;
}

// texture_pimpl
//

void texture_pimpl::
pre ()
{
  this->texture_pimpl_state_.texture_ = ::texture ();
}

void texture_pimpl::
sampler (const ::std::string& x)
{
  this->texture_pimpl_state_.texture_.sampler (x);
}

void texture_pimpl::
file (const ::std::string& x)
{
  this->texture_pimpl_state_.texture_.file (x);
}

::texture texture_pimpl::
post_texture ()
{
  return this->texture_pimpl_state_.texture_;
}

// material_pimpl
//

material_pimpl::
material_pimpl (bool b)
{
  this->material_pimpl_base_ = b;
  this->material_pimpl_state_.material_ = 0;
}

material_pimpl::
~material_pimpl ()
{
  if (!this->material_pimpl_base_ && this->material_pimpl_state_.material_)
    delete this->material_pimpl_state_.material_;
}

void material_pimpl::
_reset ()
{
  material_pskel::_reset ();

  if (!this->material_pimpl_base_ && this->material_pimpl_state_.material_)
  {
    delete this->material_pimpl_state_.material_;
    this->material_pimpl_state_.material_ = 0;
  }
}

void material_pimpl::
pre_impl (::material* x)
{
  this->material_pimpl_state_.material_ = x;
}

void material_pimpl::
pre ()
{
  ::material* x = new ::material;
  this->pre_impl (x);
}

void material_pimpl::
name (const ::std::string& x)
{
  this->material_pimpl_state_.material_->name (x);
}

void material_pimpl::
shader (const ::shader& x)
{
  this->material_pimpl_state_.material_->shader (x);
}

void material_pimpl::
texture (const ::texture& x)
{
  this->material_pimpl_state_.material_->texture ().push_back (x);
}

void material_pimpl::
vector (const ::vector& x)
{
  this->material_pimpl_state_.material_->vector ().push_back (x);
}

::material* material_pimpl::
post_material ()
{
  ::material* r = this->material_pimpl_state_.material_;
  this->material_pimpl_state_.material_ = 0;
  return r;
}

// materials_paggr
//

materials_paggr::
materials_paggr ()
{
  this->vector_p_.parsers (this->string_p_,
                           this->float_p_,
                           this->float_p_,
                           this->float_p_,
                           this->float_p_);

  this->materials_p_.parsers (this->material_p_);

  this->material_p_.parsers (this->string_p_,
                             this->shader_p_,
                             this->texture_p_,
                             this->vector_p_);

  this->shader_p_.parsers (this->string_p_);

  this->texture_p_.parsers (this->string_p_,
                            this->string_p_);
}

const char* materials_paggr::
root_name ()
{
  return "materials";
}

const char* materials_paggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

