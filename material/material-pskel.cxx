// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "material-pskel.hxx"

// materials_pskel
//

void materials_pskel::
material_parser (::material_pskel& p)
{
  this->material_parser_ = &p;
}

void materials_pskel::
parsers (::material_pskel& material)
{
  this->material_parser_ = &material;
}

materials_pskel::
materials_pskel ()
: materials_impl_ (0),
  material_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

materials_pskel::
materials_pskel (materials_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  materials_impl_ (impl),
  material_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// vector_pskel
//

void vector_pskel::
uniform_parser (::xml_schema::string_pskel& p)
{
  this->uniform_parser_ = &p;
}

void vector_pskel::
x_parser (::xml_schema::float_pskel& p)
{
  this->x_parser_ = &p;
}

void vector_pskel::
y_parser (::xml_schema::float_pskel& p)
{
  this->y_parser_ = &p;
}

void vector_pskel::
z_parser (::xml_schema::float_pskel& p)
{
  this->z_parser_ = &p;
}

void vector_pskel::
w_parser (::xml_schema::float_pskel& p)
{
  this->w_parser_ = &p;
}

void vector_pskel::
parsers (::xml_schema::string_pskel& uniform,
         ::xml_schema::float_pskel& x,
         ::xml_schema::float_pskel& y,
         ::xml_schema::float_pskel& z,
         ::xml_schema::float_pskel& w)
{
  this->uniform_parser_ = &uniform;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
  this->w_parser_ = &w;
}

vector_pskel::
vector_pskel ()
: vector_impl_ (0),
  uniform_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  w_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

vector_pskel::
vector_pskel (vector_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  vector_impl_ (impl),
  uniform_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  w_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// shader_pskel
//

void shader_pskel::
file_parser (::xml_schema::string_pskel& p)
{
  this->file_parser_ = &p;
}

void shader_pskel::
parsers (::xml_schema::string_pskel& file)
{
  this->file_parser_ = &file;
}

shader_pskel::
shader_pskel ()
: shader_impl_ (0),
  file_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

shader_pskel::
shader_pskel (shader_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  shader_impl_ (impl),
  file_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// texture_pskel
//

void texture_pskel::
sampler_parser (::xml_schema::string_pskel& p)
{
  this->sampler_parser_ = &p;
}

void texture_pskel::
file_parser (::xml_schema::string_pskel& p)
{
  this->file_parser_ = &p;
}

void texture_pskel::
parsers (::xml_schema::string_pskel& sampler,
         ::xml_schema::string_pskel& file)
{
  this->sampler_parser_ = &sampler;
  this->file_parser_ = &file;
}

texture_pskel::
texture_pskel ()
: texture_impl_ (0),
  sampler_parser_ (0),
  file_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

texture_pskel::
texture_pskel (texture_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  texture_impl_ (impl),
  sampler_parser_ (0),
  file_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// material_pskel
//

void material_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void material_pskel::
shader_parser (::shader_pskel& p)
{
  this->shader_parser_ = &p;
}

void material_pskel::
texture_parser (::texture_pskel& p)
{
  this->texture_parser_ = &p;
}

void material_pskel::
vector_parser (::vector_pskel& p)
{
  this->vector_parser_ = &p;
}

void material_pskel::
parsers (::xml_schema::string_pskel& name,
         ::shader_pskel& shader,
         ::texture_pskel& texture,
         ::vector_pskel& vector)
{
  this->name_parser_ = &name;
  this->shader_parser_ = &shader;
  this->texture_parser_ = &texture;
  this->vector_parser_ = &vector;
}

material_pskel::
material_pskel ()
: material_impl_ (0),
  name_parser_ (0),
  shader_parser_ (0),
  texture_parser_ (0),
  vector_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

material_pskel::
material_pskel (material_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  material_impl_ (impl),
  name_parser_ (0),
  shader_parser_ (0),
  texture_parser_ (0),
  vector_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

#include <assert.h>

// materials_pskel
//

void materials_pskel::
material (::material* x)
{
  if (this->materials_impl_)
    this->materials_impl_->material (x);
}

void materials_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  this->resetting_ = true;

  if (this->material_parser_)
    this->material_parser_->_reset ();

  this->resetting_ = false;
}

// vector_pskel
//

void vector_pskel::
uniform (const ::std::string& x)
{
  if (this->vector_impl_)
    this->vector_impl_->uniform (x);
}

void vector_pskel::
x (float x)
{
  if (this->vector_impl_)
    this->vector_impl_->x (x);
}

void vector_pskel::
y (float x)
{
  if (this->vector_impl_)
    this->vector_impl_->y (x);
}

void vector_pskel::
z (float x)
{
  if (this->vector_impl_)
    this->vector_impl_->z (x);
}

void vector_pskel::
w (float x)
{
  if (this->vector_impl_)
    this->vector_impl_->w (x);
}

void vector_pskel::
_reset ()
{
  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_attr_stack_.clear ();

  if (this->uniform_parser_)
    this->uniform_parser_->_reset ();

  if (this->x_parser_)
    this->x_parser_->_reset ();

  if (this->y_parser_)
    this->y_parser_->_reset ();

  if (this->z_parser_)
    this->z_parser_->_reset ();

  if (this->w_parser_)
    this->w_parser_->_reset ();
}

// shader_pskel
//

void shader_pskel::
file (const ::std::string& x)
{
  if (this->shader_impl_)
    this->shader_impl_->file (x);
}

void shader_pskel::
_reset ()
{
  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_attr_stack_.clear ();

  if (this->file_parser_)
    this->file_parser_->_reset ();
}

// texture_pskel
//

void texture_pskel::
sampler (const ::std::string& x)
{
  if (this->texture_impl_)
    this->texture_impl_->sampler (x);
}

void texture_pskel::
file (const ::std::string& x)
{
  if (this->texture_impl_)
    this->texture_impl_->file (x);
}

void texture_pskel::
_reset ()
{
  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_attr_stack_.clear ();

  if (this->sampler_parser_)
    this->sampler_parser_->_reset ();

  if (this->file_parser_)
    this->file_parser_->_reset ();
}

// material_pskel
//

void material_pskel::
name (const ::std::string& x)
{
  if (this->material_impl_)
    this->material_impl_->name (x);
}

void material_pskel::
shader (const ::shader& x)
{
  if (this->material_impl_)
    this->material_impl_->shader (x);
}

void material_pskel::
texture (const ::texture& x)
{
  if (this->material_impl_)
    this->material_impl_->texture (x);
}

void material_pskel::
vector (const ::vector& x)
{
  if (this->material_impl_)
    this->material_impl_->vector (x);
}

void material_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  this->v_state_attr_stack_.clear ();

  if (this->name_parser_)
    this->name_parser_->_reset ();

  this->resetting_ = true;

  if (this->shader_parser_)
    this->shader_parser_->_reset ();

  if (this->texture_parser_)
    this->texture_parser_->_reset ();

  if (this->vector_parser_)
    this->vector_parser_->_reset ();

  this->resetting_ = false;
}

#include <assert.h>

// Element validation and dispatch functions for materials_pskel.
//
bool materials_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "material" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &materials_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool materials_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void materials_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void materials_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void materials_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "material" && ns.empty ())
      {
        if (start)
        {
          if (this->material_parser_)
          {
            this->material_parser_->pre ();
            ctx.nested_parser (this->material_parser_);
          }
        }
        else
        {
          if (this->material_parser_ != 0)
          {
            ::material* tmp = this->material_parser_->post_material ();
            this->material (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for material_pskel.
//
bool material_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "shader" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &material_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, true);
      }
      else
      {
        if (vd->count < 1UL)
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return true;
        }

        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool material_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void material_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void material_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_schema_error (::xsde::cxx::schema_error::expected_element);

  this->v_state_stack_.pop ();
}

void material_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "shader" && ns.empty ())
      {
        if (start)
        {
          if (this->shader_parser_)
          {
            this->shader_parser_->pre ();
            ctx.nested_parser (this->shader_parser_);
          }
        }
        else
        {
          if (this->shader_parser_ != 0)
          {
            const ::shader& tmp = this->shader_parser_->post_shader ();
            this->shader (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          break;
        }

        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "texture" && ns.empty ())
      {
        if (start)
        {
          if (this->texture_parser_)
          {
            this->texture_parser_->pre ();
            ctx.nested_parser (this->texture_parser_);
          }
        }
        else
        {
          if (this->texture_parser_ != 0)
          {
            const ::texture& tmp = this->texture_parser_->post_texture ();
            this->texture (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "vector" && ns.empty ())
      {
        if (start)
        {
          if (this->vector_parser_)
          {
            this->vector_parser_->pre ();
            ctx.nested_parser (this->vector_parser_);
          }
        }
        else
        {
          if (this->vector_parser_ != 0)
          {
            const ::vector& tmp = this->vector_parser_->post_vector ();
            this->vector (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for vector_pskel.
//
bool vector_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "uniform" && ns.empty ())
  {
    if (this->uniform_parser_)
    {
      this->uniform_parser_->pre ();

      this->uniform_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->uniform_parser_->_characters (s);

      if (!ctx.error_type ())
        this->uniform_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->uniform_parser_->post_string ();

        this->uniform (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->uniform = true;
    return true;
  }

  if (n == "x" && ns.empty ())
  {
    if (this->x_parser_)
    {
      this->x_parser_->pre ();

      this->x_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->x_parser_->_characters (s);

      if (!ctx.error_type ())
        this->x_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        float tmp = this->x_parser_->post_float ();

        this->x (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->x = true;
    return true;
  }

  if (n == "y" && ns.empty ())
  {
    if (this->y_parser_)
    {
      this->y_parser_->pre ();

      this->y_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->y_parser_->_characters (s);

      if (!ctx.error_type ())
        this->y_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        float tmp = this->y_parser_->post_float ();

        this->y (tmp);
      }
    }

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    if (this->z_parser_)
    {
      this->z_parser_->pre ();

      this->z_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->z_parser_->_characters (s);

      if (!ctx.error_type ())
        this->z_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        float tmp = this->z_parser_->post_float ();

        this->z (tmp);
      }
    }

    return true;
  }

  if (n == "w" && ns.empty ())
  {
    if (this->w_parser_)
    {
      this->w_parser_->pre ();

      this->w_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->w_parser_->_characters (s);

      if (!ctx.error_type ())
        this->w_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        float tmp = this->w_parser_->post_float ();

        this->w (tmp);
      }
    }

    return true;
  }

  return false;
}

void vector_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.uniform = false;
  as.x = false;
}

void vector_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.uniform)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }

  if (!as.x)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }


  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for shader_pskel.
//
bool shader_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "file" && ns.empty ())
  {
    if (this->file_parser_)
    {
      this->file_parser_->pre ();

      this->file_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->file_parser_->_characters (s);

      if (!ctx.error_type ())
        this->file_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->file_parser_->post_string ();

        this->file (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->file = true;
    return true;
  }

  return false;
}

void shader_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.file = false;
}

void shader_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.file)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }


  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for texture_pskel.
//
bool texture_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "sampler" && ns.empty ())
  {
    if (this->sampler_parser_)
    {
      this->sampler_parser_->pre ();

      this->sampler_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->sampler_parser_->_characters (s);

      if (!ctx.error_type ())
        this->sampler_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->sampler_parser_->post_string ();

        this->sampler (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->sampler = true;
    return true;
  }

  if (n == "file" && ns.empty ())
  {
    if (this->file_parser_)
    {
      this->file_parser_->pre ();

      this->file_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->file_parser_->_characters (s);

      if (!ctx.error_type ())
        this->file_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->file_parser_->post_string ();

        this->file (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->file = true;
    return true;
  }

  return false;
}

void texture_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.sampler = false;
  as.file = false;
}

void texture_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.sampler)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }

  if (!as.file)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }


  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for material_pskel.
//
bool material_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();

      this->name_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->name_parser_->_characters (s);

      if (!ctx.error_type ())
        this->name_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->name_parser_->post_string ();

        this->name (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
    return true;
  }

  return false;
}

void material_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.name = false;
}

void material_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.name)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }


  this->v_state_attr_stack_.pop ();
}

// Begin epilogue.
//
//
// End epilogue.

