// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "material-simpl.hxx"

#include <xsde/cxx/serializer/validating/string-common.hxx>

// materials_simpl
//

void materials_simpl::
pre (const ::materials& x)
{
  this->materials_simpl_state_.materials_ = &x;
  this->materials_simpl_state_.material_ = 
  this->materials_simpl_state_.materials_->material ().begin ();
  this->materials_simpl_state_.material_end_ = 
  this->materials_simpl_state_.materials_->material ().end ();
}

bool materials_simpl::
material_next ()
{
  return this->materials_simpl_state_.material_ != 
  this->materials_simpl_state_.material_end_;
}

const ::material& materials_simpl::
material ()
{
  return *this->materials_simpl_state_.material_++;
}

// vector_simpl
//

void vector_simpl::
pre (const ::vector& x)
{
  this->vector_simpl_state_.vector_ = &x;
}

::std::string vector_simpl::
uniform ()
{
  return this->vector_simpl_state_.vector_->uniform ();
}

float vector_simpl::
x ()
{
  return this->vector_simpl_state_.vector_->x ();
}

bool vector_simpl::
y_present ()
{
  return this->vector_simpl_state_.vector_->y_present ();
}

float vector_simpl::
y ()
{
  return this->vector_simpl_state_.vector_->y ();
}

bool vector_simpl::
z_present ()
{
  return this->vector_simpl_state_.vector_->z_present ();
}

float vector_simpl::
z ()
{
  return this->vector_simpl_state_.vector_->z ();
}

bool vector_simpl::
w_present ()
{
  return this->vector_simpl_state_.vector_->w_present ();
}

float vector_simpl::
w ()
{
  return this->vector_simpl_state_.vector_->w ();
}

// shader_simpl
//

void shader_simpl::
pre (const ::shader& x)
{
  this->shader_simpl_state_.shader_ = &x;
}

::std::string shader_simpl::
file ()
{
  return this->shader_simpl_state_.shader_->file ();
}

// texture_simpl
//

void texture_simpl::
pre (const ::texture& x)
{
  this->texture_simpl_state_.texture_ = &x;
}

::std::string texture_simpl::
sampler ()
{
  return this->texture_simpl_state_.texture_->sampler ();
}

::std::string texture_simpl::
file ()
{
  return this->texture_simpl_state_.texture_->file ();
}

// material_simpl
//

void material_simpl::
pre (const ::material& x)
{
  this->material_simpl_state_.material_ = &x;
  this->material_simpl_state_.texture_ = 
  this->material_simpl_state_.material_->texture ().begin ();
  this->material_simpl_state_.texture_end_ = 
  this->material_simpl_state_.material_->texture ().end ();
  this->material_simpl_state_.vector_ = 
  this->material_simpl_state_.material_->vector ().begin ();
  this->material_simpl_state_.vector_end_ = 
  this->material_simpl_state_.material_->vector ().end ();
}

::std::string material_simpl::
name ()
{
  return this->material_simpl_state_.material_->name ();
}

const ::shader& material_simpl::
shader ()
{
  return this->material_simpl_state_.material_->shader ();
}

bool material_simpl::
texture_next ()
{
  return this->material_simpl_state_.texture_ != 
  this->material_simpl_state_.texture_end_;
}

const ::texture& material_simpl::
texture ()
{
  return *this->material_simpl_state_.texture_++;
}

bool material_simpl::
vector_next ()
{
  return this->material_simpl_state_.vector_ != 
  this->material_simpl_state_.vector_end_;
}

const ::vector& material_simpl::
vector ()
{
  return *this->material_simpl_state_.vector_++;
}

// materials_saggr
//

materials_saggr::
materials_saggr ()
{
  this->vector_s_.serializers (this->string_s_,
                               this->float_s_,
                               this->float_s_,
                               this->float_s_,
                               this->float_s_);

  this->materials_s_.serializers (this->material_s_);

  this->material_s_.serializers (this->string_s_,
                                 this->shader_s_,
                                 this->texture_s_,
                                 this->vector_s_);

  this->shader_s_.serializers (this->string_s_);

  this->texture_s_.serializers (this->string_s_,
                                this->string_s_);
}

const char* materials_saggr::
root_name ()
{
  return "materials";
}

const char* materials_saggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

