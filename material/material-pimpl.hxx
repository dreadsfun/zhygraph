// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_PIMPL_HXX
#define E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "material-pskel.hxx"

#include <xsde/cxx/stack.hxx>

class materials_pimpl: public materials_pskel
{
  public:
  materials_pimpl (bool = false);

  ~materials_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  material (::material*);

  virtual ::materials*
  post_materials ();

  public:
  void
  pre_impl (::materials*);

  public:
  struct materials_pimpl_state
  {
    ::materials* materials_;
  };

  materials_pimpl_state materials_pimpl_state_;
  bool materials_pimpl_base_;
};

class vector_pimpl: public vector_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  uniform (const ::std::string&);

  virtual void
  x (float);

  virtual void
  y (float);

  virtual void
  z (float);

  virtual void
  w (float);

  virtual ::vector
  post_vector ();

  public:
  struct vector_pimpl_state
  {
    ::vector vector_;
  };

  vector_pimpl_state vector_pimpl_state_;
};

class shader_pimpl: public shader_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  file (const ::std::string&);

  virtual ::shader
  post_shader ();

  public:
  struct shader_pimpl_state
  {
    ::shader shader_;
  };

  shader_pimpl_state shader_pimpl_state_;
};

class texture_pimpl: public texture_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  sampler (const ::std::string&);

  virtual void
  file (const ::std::string&);

  virtual ::texture
  post_texture ();

  public:
  struct texture_pimpl_state
  {
    ::texture texture_;
  };

  texture_pimpl_state texture_pimpl_state_;
};

class material_pimpl: public material_pskel
{
  public:
  material_pimpl (bool = false);

  ~material_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  // Elements.
  //
  virtual void
  shader (const ::shader&);

  virtual void
  texture (const ::texture&);

  virtual void
  vector (const ::vector&);

  virtual ::material*
  post_material ();

  public:
  void
  pre_impl (::material*);

  public:
  struct material_pimpl_state
  {
    ::material* material_;
  };

  material_pimpl_state material_pimpl_state_;
  bool material_pimpl_base_;
};

#ifdef E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

// Parser aggregate for the materials element.
//
class materials_paggr
{
  public:
  materials_paggr ();

  void
  pre ()
  {
    this->materials_p_.pre ();
  }

  ::materials*
  post ()
  {
    return this->materials_p_.post_materials ();
  }

  ::materials_pimpl&
  root_parser ()
  {
    return this->materials_p_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->materials_p_._reset ();
  }

  public:
  ::xml_schema::float_pimpl float_p_;
  ::xml_schema::string_pimpl string_p_;
  ::vector_pimpl vector_p_;
  ::materials_pimpl materials_p_;
  ::material_pimpl material_p_;
  ::shader_pimpl shader_p_;
  ::texture_pimpl texture_p_;
};

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_MATERIAL_MATERIAL_PIMPL_HXX
