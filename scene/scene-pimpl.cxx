// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "scene-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

// vec3_type_pimpl
//

void vec3_type_pimpl::
pre ()
{
  this->vec3_type_pimpl_state_.vec3_type_ = ::vec3_type ();
}

void vec3_type_pimpl::
x (float x)
{
  this->vec3_type_pimpl_state_.vec3_type_.x (x);
}

void vec3_type_pimpl::
y (float x)
{
  this->vec3_type_pimpl_state_.vec3_type_.y (x);
}

void vec3_type_pimpl::
z (float x)
{
  this->vec3_type_pimpl_state_.vec3_type_.z (x);
}

::vec3_type vec3_type_pimpl::
post_vec3_type ()
{
  return this->vec3_type_pimpl_state_.vec3_type_;
}

// vec4_type_pimpl
//

void vec4_type_pimpl::
pre ()
{
  this->vec4_type_pimpl_state_.vec4_type_ = ::vec4_type ();
}

void vec4_type_pimpl::
x (float x)
{
  this->vec4_type_pimpl_state_.vec4_type_.x (x);
}

void vec4_type_pimpl::
y (float x)
{
  this->vec4_type_pimpl_state_.vec4_type_.y (x);
}

void vec4_type_pimpl::
z (float x)
{
  this->vec4_type_pimpl_state_.vec4_type_.z (x);
}

void vec4_type_pimpl::
w (float x)
{
  this->vec4_type_pimpl_state_.vec4_type_.w (x);
}

::vec4_type vec4_type_pimpl::
post_vec4_type ()
{
  return this->vec4_type_pimpl_state_.vec4_type_;
}

// scene_graph_pimpl
//

scene_graph_pimpl::
scene_graph_pimpl (bool b)
{
  this->scene_graph_pimpl_base_ = b;
  this->scene_graph_pimpl_state_.scene_graph_ = 0;
}

scene_graph_pimpl::
~scene_graph_pimpl ()
{
  if (!this->scene_graph_pimpl_base_ && this->scene_graph_pimpl_state_.scene_graph_)
    delete this->scene_graph_pimpl_state_.scene_graph_;
}

void scene_graph_pimpl::
_reset ()
{
  scene_graph_pskel::_reset ();

  if (!this->scene_graph_pimpl_base_ && this->scene_graph_pimpl_state_.scene_graph_)
  {
    delete this->scene_graph_pimpl_state_.scene_graph_;
    this->scene_graph_pimpl_state_.scene_graph_ = 0;
  }
}

void scene_graph_pimpl::
pre_impl (::scene_graph* x)
{
  this->scene_graph_pimpl_state_.scene_graph_ = x;
}

void scene_graph_pimpl::
pre ()
{
  ::scene_graph* x = new ::scene_graph;
  this->pre_impl (x);
}

void scene_graph_pimpl::
nodes (::nodes* x)
{
  this->scene_graph_pimpl_state_.scene_graph_->nodes (x);
}

void scene_graph_pimpl::
scenes (::scenes* x)
{
  this->scene_graph_pimpl_state_.scene_graph_->scenes (x);
}

::scene_graph* scene_graph_pimpl::
post_scene_graph ()
{
  ::scene_graph* r = this->scene_graph_pimpl_state_.scene_graph_;
  this->scene_graph_pimpl_state_.scene_graph_ = 0;
  return r;
}

// nodes_pimpl
//

nodes_pimpl::
nodes_pimpl (bool b)
{
  this->nodes_pimpl_base_ = b;
  this->nodes_pimpl_state_.nodes_ = 0;
}

nodes_pimpl::
~nodes_pimpl ()
{
  if (!this->nodes_pimpl_base_ && this->nodes_pimpl_state_.nodes_)
    delete this->nodes_pimpl_state_.nodes_;
}

void nodes_pimpl::
_reset ()
{
  nodes_pskel::_reset ();

  if (!this->nodes_pimpl_base_ && this->nodes_pimpl_state_.nodes_)
  {
    delete this->nodes_pimpl_state_.nodes_;
    this->nodes_pimpl_state_.nodes_ = 0;
  }
}

void nodes_pimpl::
pre_impl (::nodes* x)
{
  this->nodes_pimpl_state_.nodes_ = x;
}

void nodes_pimpl::
pre ()
{
  ::nodes* x = new ::nodes;
  this->pre_impl (x);
}

void nodes_pimpl::
node (::node* x)
{
  this->nodes_pimpl_state_.nodes_->node ().push_back (x);
}

::nodes* nodes_pimpl::
post_nodes ()
{
  ::nodes* r = this->nodes_pimpl_state_.nodes_;
  this->nodes_pimpl_state_.nodes_ = 0;
  return r;
}

// scene_pimpl
//

void scene_pimpl::
pre ()
{
  this->scene_pimpl_state_.scene_ = ::scene ();
}

void scene_pimpl::
name (const ::std::string& x)
{
  this->scene_pimpl_state_.scene_.name (x);
}

void scene_pimpl::
graph (const ::std::string& x)
{
  this->scene_pimpl_state_.scene_.graph (x);
}

::scene scene_pimpl::
post_scene ()
{
  return this->scene_pimpl_state_.scene_;
}

// scenes_pimpl
//

scenes_pimpl::
scenes_pimpl (bool b)
{
  this->scenes_pimpl_base_ = b;
  this->scenes_pimpl_state_.scenes_ = 0;
}

scenes_pimpl::
~scenes_pimpl ()
{
  if (!this->scenes_pimpl_base_ && this->scenes_pimpl_state_.scenes_)
    delete this->scenes_pimpl_state_.scenes_;
}

void scenes_pimpl::
_reset ()
{
  scenes_pskel::_reset ();

  if (!this->scenes_pimpl_base_ && this->scenes_pimpl_state_.scenes_)
  {
    delete this->scenes_pimpl_state_.scenes_;
    this->scenes_pimpl_state_.scenes_ = 0;
  }
}

void scenes_pimpl::
pre_impl (::scenes* x)
{
  this->scenes_pimpl_state_.scenes_ = x;
}

void scenes_pimpl::
pre ()
{
  ::scenes* x = new ::scenes;
  this->pre_impl (x);
}

void scenes_pimpl::
scene (const ::scene& x)
{
  this->scenes_pimpl_state_.scenes_->scene ().push_back (x);
}

::scenes* scenes_pimpl::
post_scenes ()
{
  ::scenes* r = this->scenes_pimpl_state_.scenes_;
  this->scenes_pimpl_state_.scenes_ = 0;
  return r;
}

// attribute_pimpl
//

void attribute_pimpl::
pre ()
{
  this->attribute_pimpl_state_.attribute_ = ::attribute ();
}

void attribute_pimpl::
name (const ::std::string& x)
{
  this->attribute_pimpl_state_.attribute_.name (x);
}

void attribute_pimpl::
value (const ::std::string& x)
{
  this->attribute_pimpl_state_.attribute_.value (x);
}

::attribute attribute_pimpl::
post_attribute ()
{
  return this->attribute_pimpl_state_.attribute_;
}

// node_pimpl
//

node_pimpl::
node_pimpl (bool b)
{
  this->node_pimpl_base_ = b;
  this->node_pimpl_state_.node_ = 0;
}

node_pimpl::
~node_pimpl ()
{
  if (!this->node_pimpl_base_ && this->node_pimpl_state_.node_)
    delete this->node_pimpl_state_.node_;
}

void node_pimpl::
_reset ()
{
  node_pskel::_reset ();

  if (!this->node_pimpl_base_ && this->node_pimpl_state_.node_)
  {
    delete this->node_pimpl_state_.node_;
    this->node_pimpl_state_.node_ = 0;
  }
}

void node_pimpl::
pre_impl (::node* x)
{
  this->node_pimpl_state_.node_ = x;
}

void node_pimpl::
pre ()
{
  ::node* x = new ::node;
  this->pre_impl (x);
}

void node_pimpl::
name (const ::std::string& x)
{
  this->node_pimpl_state_.node_->name (x);
}

void node_pimpl::
class_ (const ::std::string& x)
{
  this->node_pimpl_state_.node_->class_ (x);
}

void node_pimpl::
position (const ::vec3_type& x)
{
  this->node_pimpl_state_.node_->position (x);
}

void node_pimpl::
rotation (const ::vec4_type& x)
{
  this->node_pimpl_state_.node_->rotation (x);
}

void node_pimpl::
scale (const ::vec3_type& x)
{
  this->node_pimpl_state_.node_->scale (x);
}

void node_pimpl::
attribute (const ::attribute& x)
{
  this->node_pimpl_state_.node_->attribute ().push_back (x);
}

::node* node_pimpl::
post_node ()
{
  ::node* r = this->node_pimpl_state_.node_;
  this->node_pimpl_state_.node_ = 0;
  return r;
}

// scene_graph_paggr
//

scene_graph_paggr::
scene_graph_paggr ()
{
  this->scene_p_.parsers (this->token_p_,
                          this->string_p_);

  this->vec3_type_p_.parsers (this->float_p_,
                              this->float_p_,
                              this->float_p_);

  this->vec4_type_p_.parsers (this->float_p_,
                              this->float_p_,
                              this->float_p_,
                              this->float_p_);

  this->scene_graph_p_.parsers (this->nodes_p_,
                                this->scenes_p_);

  this->nodes_p_.parsers (this->node_p_);

  this->node_p_.parsers (this->token_p_,
                         this->token_p_,
                         this->vec3_type_p_,
                         this->vec4_type_p_,
                         this->vec3_type_p_,
                         this->attribute_p_);

  this->attribute_p_.parsers (this->token_p_,
                              this->string_p_);

  this->scenes_p_.parsers (this->scene_p_);
}

const char* scene_graph_paggr::
root_name ()
{
  return "scene-graph";
}

const char* scene_graph_paggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

