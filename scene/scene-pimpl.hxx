// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_SCENE_SCENE_PIMPL_HXX
#define E__VS14PRJBKP_ENGINE_SCENE_SCENE_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define E__VS14PRJBKP_ENGINE_SCENE_SCENE_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "scene-pskel.hxx"

#include <xsde/cxx/stack.hxx>

class vec3_type_pimpl: public vec3_type_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  x (float);

  virtual void
  y (float);

  virtual void
  z (float);

  virtual ::vec3_type
  post_vec3_type ();

  public:
  struct vec3_type_pimpl_state
  {
    ::vec3_type vec3_type_;
  };

  vec3_type_pimpl_state vec3_type_pimpl_state_;
};

class vec4_type_pimpl: public vec4_type_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  x (float);

  virtual void
  y (float);

  virtual void
  z (float);

  virtual void
  w (float);

  virtual ::vec4_type
  post_vec4_type ();

  public:
  struct vec4_type_pimpl_state
  {
    ::vec4_type vec4_type_;
  };

  vec4_type_pimpl_state vec4_type_pimpl_state_;
};

class scene_graph_pimpl: public scene_graph_pskel
{
  public:
  scene_graph_pimpl (bool = false);

  ~scene_graph_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  nodes (::nodes*);

  virtual void
  scenes (::scenes*);

  virtual ::scene_graph*
  post_scene_graph ();

  public:
  void
  pre_impl (::scene_graph*);

  public:
  struct scene_graph_pimpl_state
  {
    ::scene_graph* scene_graph_;
  };

  scene_graph_pimpl_state scene_graph_pimpl_state_;
  bool scene_graph_pimpl_base_;
};

class nodes_pimpl: public nodes_pskel
{
  public:
  nodes_pimpl (bool = false);

  ~nodes_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  node (::node*);

  virtual ::nodes*
  post_nodes ();

  public:
  void
  pre_impl (::nodes*);

  public:
  struct nodes_pimpl_state
  {
    ::nodes* nodes_;
  };

  nodes_pimpl_state nodes_pimpl_state_;
  bool nodes_pimpl_base_;
};

class scene_pimpl: public scene_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  graph (const ::std::string&);

  virtual ::scene
  post_scene ();

  public:
  struct scene_pimpl_state
  {
    ::scene scene_;
  };

  scene_pimpl_state scene_pimpl_state_;
};

class scenes_pimpl: public scenes_pskel
{
  public:
  scenes_pimpl (bool = false);

  ~scenes_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  scene (const ::scene&);

  virtual ::scenes*
  post_scenes ();

  public:
  void
  pre_impl (::scenes*);

  public:
  struct scenes_pimpl_state
  {
    ::scenes* scenes_;
  };

  scenes_pimpl_state scenes_pimpl_state_;
  bool scenes_pimpl_base_;
};

class attribute_pimpl: public attribute_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  value (const ::std::string&);

  virtual ::attribute
  post_attribute ();

  public:
  struct attribute_pimpl_state
  {
    ::attribute attribute_;
  };

  attribute_pimpl_state attribute_pimpl_state_;
};

class node_pimpl: public node_pskel
{
  public:
  node_pimpl (bool = false);

  ~node_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  class_ (const ::std::string&);

  // Elements.
  //
  virtual void
  position (const ::vec3_type&);

  virtual void
  rotation (const ::vec4_type&);

  virtual void
  scale (const ::vec3_type&);

  virtual void
  attribute (const ::attribute&);

  virtual ::node*
  post_node ();

  public:
  void
  pre_impl (::node*);

  public:
  struct node_pimpl_state
  {
    ::node* node_;
  };

  node_pimpl_state node_pimpl_state_;
  bool node_pimpl_base_;
};

#ifdef E__VS14PRJBKP_ENGINE_SCENE_SCENE_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

// Parser aggregate for the scene-graph element.
//
class scene_graph_paggr
{
  public:
  scene_graph_paggr ();

  void
  pre ()
  {
    this->scene_graph_p_.pre ();
  }

  ::scene_graph*
  post ()
  {
    return this->scene_graph_p_.post_scene_graph ();
  }

  ::scene_graph_pimpl&
  root_parser ()
  {
    return this->scene_graph_p_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->scene_graph_p_._reset ();
  }

  public:
  ::xml_schema::string_pimpl string_p_;
  ::xml_schema::token_pimpl token_p_;
  ::xml_schema::float_pimpl float_p_;
  ::scene_pimpl scene_p_;
  ::vec3_type_pimpl vec3_type_p_;
  ::vec4_type_pimpl vec4_type_p_;
  ::scene_graph_pimpl scene_graph_p_;
  ::nodes_pimpl nodes_p_;
  ::node_pimpl node_p_;
  ::attribute_pimpl attribute_p_;
  ::scenes_pimpl scenes_p_;
};

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_SCENE_SCENE_PIMPL_HXX
