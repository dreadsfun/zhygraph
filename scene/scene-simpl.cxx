// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "scene-simpl.hxx"

#include <xsde/cxx/serializer/validating/string-common.hxx>

// vec3_type_simpl
//

void vec3_type_simpl::
pre (const ::vec3_type& x)
{
  this->vec3_type_simpl_state_.vec3_type_ = &x;
}

float vec3_type_simpl::
x ()
{
  return this->vec3_type_simpl_state_.vec3_type_->x ();
}

float vec3_type_simpl::
y ()
{
  return this->vec3_type_simpl_state_.vec3_type_->y ();
}

float vec3_type_simpl::
z ()
{
  return this->vec3_type_simpl_state_.vec3_type_->z ();
}

// vec4_type_simpl
//

void vec4_type_simpl::
pre (const ::vec4_type& x)
{
  this->vec4_type_simpl_state_.vec4_type_ = &x;
}

float vec4_type_simpl::
x ()
{
  return this->vec4_type_simpl_state_.vec4_type_->x ();
}

float vec4_type_simpl::
y ()
{
  return this->vec4_type_simpl_state_.vec4_type_->y ();
}

float vec4_type_simpl::
z ()
{
  return this->vec4_type_simpl_state_.vec4_type_->z ();
}

float vec4_type_simpl::
w ()
{
  return this->vec4_type_simpl_state_.vec4_type_->w ();
}

// scene_graph_simpl
//

void scene_graph_simpl::
pre (const ::scene_graph& x)
{
  this->scene_graph_simpl_state_.scene_graph_ = &x;
}

bool scene_graph_simpl::
nodes_present ()
{
  return this->scene_graph_simpl_state_.scene_graph_->nodes_present ();
}

const ::nodes& scene_graph_simpl::
nodes ()
{
  return this->scene_graph_simpl_state_.scene_graph_->nodes ();
}

bool scene_graph_simpl::
scenes_present ()
{
  return this->scene_graph_simpl_state_.scene_graph_->scenes_present ();
}

const ::scenes& scene_graph_simpl::
scenes ()
{
  return this->scene_graph_simpl_state_.scene_graph_->scenes ();
}

// nodes_simpl
//

void nodes_simpl::
pre (const ::nodes& x)
{
  this->nodes_simpl_state_.nodes_ = &x;
  this->nodes_simpl_state_.node_ = 
  this->nodes_simpl_state_.nodes_->node ().begin ();
  this->nodes_simpl_state_.node_end_ = 
  this->nodes_simpl_state_.nodes_->node ().end ();
}

bool nodes_simpl::
node_next ()
{
  return this->nodes_simpl_state_.node_ != 
  this->nodes_simpl_state_.node_end_;
}

const ::node& nodes_simpl::
node ()
{
  return *this->nodes_simpl_state_.node_++;
}

// scene_simpl
//

void scene_simpl::
pre (const ::scene& x)
{
  this->scene_simpl_state_.scene_ = &x;
}

::std::string scene_simpl::
name ()
{
  return this->scene_simpl_state_.scene_->name ();
}

bool scene_simpl::
graph_present ()
{
  return this->scene_simpl_state_.scene_->graph_present ();
}

::std::string scene_simpl::
graph ()
{
  return this->scene_simpl_state_.scene_->graph ();
}

// scenes_simpl
//

void scenes_simpl::
pre (const ::scenes& x)
{
  this->scenes_simpl_state_.scenes_ = &x;
  this->scenes_simpl_state_.scene_ = 
  this->scenes_simpl_state_.scenes_->scene ().begin ();
  this->scenes_simpl_state_.scene_end_ = 
  this->scenes_simpl_state_.scenes_->scene ().end ();
}

bool scenes_simpl::
scene_next ()
{
  return this->scenes_simpl_state_.scene_ != 
  this->scenes_simpl_state_.scene_end_;
}

const ::scene& scenes_simpl::
scene ()
{
  return *this->scenes_simpl_state_.scene_++;
}

// attribute_simpl
//

void attribute_simpl::
pre (const ::attribute& x)
{
  this->attribute_simpl_state_.attribute_ = &x;
}

bool attribute_simpl::
name_present ()
{
  return this->attribute_simpl_state_.attribute_->name_present ();
}

::std::string attribute_simpl::
name ()
{
  return this->attribute_simpl_state_.attribute_->name ();
}

bool attribute_simpl::
value_present ()
{
  return this->attribute_simpl_state_.attribute_->value_present ();
}

::std::string attribute_simpl::
value ()
{
  return this->attribute_simpl_state_.attribute_->value ();
}

// node_simpl
//

void node_simpl::
pre (const ::node& x)
{
  this->node_simpl_state_.node_ = &x;
  this->node_simpl_state_.attribute_ = 
  this->node_simpl_state_.node_->attribute ().begin ();
  this->node_simpl_state_.attribute_end_ = 
  this->node_simpl_state_.node_->attribute ().end ();
}

::std::string node_simpl::
name ()
{
  return this->node_simpl_state_.node_->name ();
}

::std::string node_simpl::
class_ ()
{
  return this->node_simpl_state_.node_->class_ ();
}

bool node_simpl::
position_present ()
{
  return this->node_simpl_state_.node_->position_present ();
}

const ::vec3_type& node_simpl::
position ()
{
  return this->node_simpl_state_.node_->position ();
}

bool node_simpl::
rotation_present ()
{
  return this->node_simpl_state_.node_->rotation_present ();
}

const ::vec4_type& node_simpl::
rotation ()
{
  return this->node_simpl_state_.node_->rotation ();
}

bool node_simpl::
scale_present ()
{
  return this->node_simpl_state_.node_->scale_present ();
}

const ::vec3_type& node_simpl::
scale ()
{
  return this->node_simpl_state_.node_->scale ();
}

bool node_simpl::
attribute_next ()
{
  return this->node_simpl_state_.attribute_ != 
  this->node_simpl_state_.attribute_end_;
}

const ::attribute& node_simpl::
attribute ()
{
  return *this->node_simpl_state_.attribute_++;
}

// scene_graph_saggr
//

scene_graph_saggr::
scene_graph_saggr ()
{
  this->scene_s_.serializers (this->token_s_,
                              this->string_s_);

  this->vec3_type_s_.serializers (this->float_s_,
                                  this->float_s_,
                                  this->float_s_);

  this->vec4_type_s_.serializers (this->float_s_,
                                  this->float_s_,
                                  this->float_s_,
                                  this->float_s_);

  this->scene_graph_s_.serializers (this->nodes_s_,
                                    this->scenes_s_);

  this->nodes_s_.serializers (this->node_s_);

  this->node_s_.serializers (this->token_s_,
                             this->token_s_,
                             this->vec3_type_s_,
                             this->vec4_type_s_,
                             this->vec3_type_s_,
                             this->attribute_s_);

  this->attribute_s_.serializers (this->token_s_,
                                  this->string_s_);

  this->scenes_s_.serializers (this->scene_s_);
}

const char* scene_graph_saggr::
root_name ()
{
  return "scene-graph";
}

const char* scene_graph_saggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

