// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef E__VS14PRJBKP_ENGINE_SCENE_SCENE_SIMPL_HXX
#define E__VS14PRJBKP_ENGINE_SCENE_SCENE_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define E__VS14PRJBKP_ENGINE_SCENE_SCENE_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "scene-sskel.hxx"

#include <xsde/cxx/stack.hxx>

class vec3_type_simpl: public vec3_type_sskel
{
  public:
  virtual void
  pre (const ::vec3_type&);

  // Attributes.
  //
  virtual float
  x ();

  virtual float
  y ();

  virtual float
  z ();

  public:
  struct vec3_type_simpl_state
  {
    const ::vec3_type* vec3_type_;
  };

  vec3_type_simpl_state vec3_type_simpl_state_;
};

class vec4_type_simpl: public vec4_type_sskel
{
  public:
  virtual void
  pre (const ::vec4_type&);

  // Attributes.
  //
  virtual float
  x ();

  virtual float
  y ();

  virtual float
  z ();

  virtual float
  w ();

  public:
  struct vec4_type_simpl_state
  {
    const ::vec4_type* vec4_type_;
  };

  vec4_type_simpl_state vec4_type_simpl_state_;
};

class scene_graph_simpl: public scene_graph_sskel
{
  public:
  virtual void
  pre (const ::scene_graph&);

  // Elements.
  //
  virtual bool
  nodes_present ();

  virtual const ::nodes&
  nodes ();

  virtual bool
  scenes_present ();

  virtual const ::scenes&
  scenes ();

  public:
  struct scene_graph_simpl_state
  {
    const ::scene_graph* scene_graph_;
  };

  scene_graph_simpl_state scene_graph_simpl_state_;
};

class nodes_simpl: public nodes_sskel
{
  public:
  virtual void
  pre (const ::nodes&);

  // Elements.
  //
  virtual bool
  node_next ();

  virtual const ::node&
  node ();

  public:
  struct nodes_simpl_state
  {
    const ::nodes* nodes_;
    ::nodes::node_const_iterator node_;
    ::nodes::node_const_iterator node_end_;
  };

  nodes_simpl_state nodes_simpl_state_;
};

class scene_simpl: public scene_sskel
{
  public:
  virtual void
  pre (const ::scene&);

  // Attributes.
  //
  virtual ::std::string
  name ();

  virtual bool
  graph_present ();

  virtual ::std::string
  graph ();

  public:
  struct scene_simpl_state
  {
    const ::scene* scene_;
  };

  scene_simpl_state scene_simpl_state_;
};

class scenes_simpl: public scenes_sskel
{
  public:
  virtual void
  pre (const ::scenes&);

  // Elements.
  //
  virtual bool
  scene_next ();

  virtual const ::scene&
  scene ();

  public:
  struct scenes_simpl_state
  {
    const ::scenes* scenes_;
    ::scenes::scene_const_iterator scene_;
    ::scenes::scene_const_iterator scene_end_;
  };

  scenes_simpl_state scenes_simpl_state_;
};

class attribute_simpl: public attribute_sskel
{
  public:
  virtual void
  pre (const ::attribute&);

  // Attributes.
  //
  virtual bool
  name_present ();

  virtual ::std::string
  name ();

  virtual bool
  value_present ();

  virtual ::std::string
  value ();

  public:
  struct attribute_simpl_state
  {
    const ::attribute* attribute_;
  };

  attribute_simpl_state attribute_simpl_state_;
};

class node_simpl: public node_sskel
{
  public:
  virtual void
  pre (const ::node&);

  // Attributes.
  //
  virtual ::std::string
  name ();

  virtual ::std::string
  class_ ();

  // Elements.
  //
  virtual bool
  position_present ();

  virtual const ::vec3_type&
  position ();

  virtual bool
  rotation_present ();

  virtual const ::vec4_type&
  rotation ();

  virtual bool
  scale_present ();

  virtual const ::vec3_type&
  scale ();

  virtual bool
  attribute_next ();

  virtual const ::attribute&
  attribute ();

  public:
  struct node_simpl_state
  {
    const ::node* node_;
    ::node::attribute_const_iterator attribute_;
    ::node::attribute_const_iterator attribute_end_;
  };

  node_simpl_state node_simpl_state_;
};

#ifdef E__VS14PRJBKP_ENGINE_SCENE_SCENE_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

// Serializer aggregate for the scene-graph element.
//
class scene_graph_saggr
{
  public:
  scene_graph_saggr ();

  void
  pre (const ::scene_graph& x)
  {
    this->scene_graph_s_.pre (x);
  }

  void
  post ()
  {
    this->scene_graph_s_.post ();
  }

  ::scene_graph_simpl&
  root_serializer ()
  {
    return this->scene_graph_s_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->scene_graph_s_._reset ();
  }

  public:
  ::xml_schema::string_simpl string_s_;
  ::xml_schema::token_simpl token_s_;
  ::xml_schema::float_simpl float_s_;
  ::scene_simpl scene_s_;
  ::vec3_type_simpl vec3_type_s_;
  ::vec4_type_simpl vec4_type_s_;
  ::scene_graph_simpl scene_graph_s_;
  ::nodes_simpl nodes_s_;
  ::node_simpl node_s_;
  ::attribute_simpl attribute_s_;
  ::scenes_simpl scenes_s_;
};

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // E__VS14PRJBKP_ENGINE_SCENE_SCENE_SIMPL_HXX
